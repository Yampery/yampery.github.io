<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博文整理</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-16T09:20:08.802Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yampery</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ambari搭建大数据平台</title>
    <link href="http://yoursite.com/2018/07/16/ambari/"/>
    <id>http://yoursite.com/2018/07/16/ambari/</id>
    <published>2018-07-16T09:19:42.912Z</published>
    <updated>2018-07-16T09:20:08.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="准备节点"><a href="#准备节点" class="headerlink" title="准备节点"></a>准备节点</h2><ul><li>node1: yum源，httpd，mariadb和java8环境</li><li>node2: java8环境</li><li>node3: java8环境</li><li>node4: java8环境</li></ul><p>将主机名-ip映射配置到每个节点</p><pre><code>/etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.107.74 node1192.168.107.83 node2192.168.107.105 node3192.168.107.131 node4</code></pre><h2 id="免秘钥登录"><a href="#免秘钥登录" class="headerlink" title="免秘钥登录"></a>免秘钥登录</h2><ol><li><p>在每个节点上生成ssh秘钥</p> <figure class="highlight plain"><figcaption><span>-t rsa -P '' -f ~/.ssh/id_rsa</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>将主节点公钥依次发送到其余节点</p> <figure class="highlight plain"><figcaption><span>.ssh/id_rsa.pub root@node2:~/</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>将主节点上的公钥追加到其他节点~/.ssh/authorized_keys</p> <figure class="highlight plain"><figcaption><span>cat id_rsa.pub >> ~/.ssh/authorized_keys && cat id_rsa.pub >> ~/.ssh/authorized_keys && chmod 0600 ~/.ssh/authorized_keys</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试免秘钥登录</p> <figure class="highlight plain"><figcaption><span>root@node2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="关闭Selinux和防火墙"><a href="#关闭Selinux和防火墙" class="headerlink" title="关闭Selinux和防火墙"></a>关闭Selinux和防火墙</h2><pre><code>vim /etc/sysconfig/selinuxselinux=disalbedsystemctl stop firewalldsystemctl disable firewalld</code></pre><h2 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h2><blockquote><p>如果节点上时间不正确，则：</p></blockquote><pre><code># 安装ntpdate工具 yum -y install ntp ntpdate  # 设置系统时间与网络时间同步   ntpdate cn.pool.ntp.org# 将系统时间写入硬件时间hwclock --systohc</code></pre><h3 id="安装nscd"><a href="#安装nscd" class="headerlink" title="安装nscd"></a>安装nscd</h3><blockquote><p>由于ambari server和client之间要通信，为了减轻dns压力使用nscd缓存</p></blockquote><pre><code>yum install -y nscdsystemctl enable nscd &amp;&amp; systemctl start nscd</code></pre><h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><pre><code>略</code></pre><h2 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h2><ol><li><p>安装yum-utils</p> <figure class="highlight plain"><figcaption><span>install yum-utils createrepo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建HTTP服务</p> <figure class="highlight plain"><figcaption><span>install httpd -y</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>下载源，根据自己想要的版本更改</p><p> 将repo文件放在/etc/yum.repos.d/ 目录下，等会配置，tgz文件放在http服务器下：/var/www/html下</p><pre><code>wget http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.6.1.0/ambari.repowget http://public-repo-1.hortonworks.com/HDP/centos7/2.x/updates/2.6.4.0/hdp.repowget http://public-repo-1.hortonworks.com/ambari/centos7/2.x/updates/2.6.1.0/ambari-2.6.1.0-centos7.tar.gzwget http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.22/repos/centos7/HDP-UTILS-1.1.0.22-centos7.tar.gzwget http://public-repo-1.hortonworks.com/HDP-GPL/centos7/2.x/updates/2.6.4.0/HDP-GPL-2.6.4.0-centos7-rpm.tar.gzwget http://public-repo-1.hortonworks.com/HDP/centos7/2.x/updates/2.6.4.0/HDP-2.6.4.0-centos7-rpm.tar.gz</code></pre><p> 将以上tgz文件解压在/var/www/html下</p></li><li><p>启动httpd测试访问</p><p> systemctl start httpd<br> 访问：<a href="http://node1/ambari" target="_blank" rel="noopener">http://node1/ambari</a>, <a href="http://node1/HDP" target="_blank" rel="noopener">http://node1/HDP</a>, <a href="http://node1/HDP-UTILS.." target="_blank" rel="noopener">http://node1/HDP-UTILS..</a>.</p></li><li><p>配置yum源</p><ul><li><p>更改/etc/yum.repos.d/下刚才下载的文件，将源路径指向node1</p><p>vi /etc/yum.repos.d/hdp.repo</p><p>  [HDP-2.6.4.0]<br>  name=HDP Version - HDP-2.6.4.0<br>  baseurl=<a href="http://node1/HDP/centos7/2.6.4.0-91" target="_blank" rel="noopener">http://node1/HDP/centos7/2.6.4.0-91</a><br>  gpgcheck=1<br>  gpgkey=<a href="http://node1/HDP/centos7/2.6.4.0-91/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins" target="_blank" rel="noopener">http://node1/HDP/centos7/2.6.4.0-91/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</a><br>  enabled=1<br>  priority=1</p><p>  [HDP-UTILS-1.1.0.22]<br>  name=HDP-UTILS Version - HDP-UTILS-1.1.0.22<br>  baseurl=<a href="http://node1/HDP-UTILS/centos7/1.1.0.22" target="_blank" rel="noopener">http://node1/HDP-UTILS/centos7/1.1.0.22</a><br>  gpgcheck=1<br>  gpgkey=<a href="http://node1/HDP-UTILS/centos7/1.1.0.22/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins" target="_blank" rel="noopener">http://node1/HDP-UTILS/centos7/1.1.0.22/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</a><br>  enabled=1<br>  priority=1</p><p>  [HDP-GPL-2.6.4.0]<br>  name=HDP-GPL Version - HDP-GPL-2.6.4.0<br>  baseurl=<a href="http://node1/HDP-GPL/centos7/2.6.4.0-91" target="_blank" rel="noopener">http://node1/HDP-GPL/centos7/2.6.4.0-91</a><br>  gpgcheck=1<br>  gpgkey=<a href="http://node1/HDP-GPL/centos7/2.6.4.0-91/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins" target="_blank" rel="noopener">http://node1/HDP-GPL/centos7/2.6.4.0-91/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</a><br>  enabled=1<br>  priority=1</p><p>vi /etc/yum.repos.d/hdp.repo</p><p>  [ambari-2.6.1.0]<br>  name=ambari Version - ambari-2.6.1.0<br>  baseurl=<a href="http://node1/ambari/centos7/2.6.1.0-143" target="_blank" rel="noopener">http://node1/ambari/centos7/2.6.1.0-143</a><br>  gpgcheck=1<br>  gpgkey=<a href="http://node1/ambari/centos7/2.6.1.0-143/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins" target="_blank" rel="noopener">http://node1/ambari/centos7/2.6.1.0-143/RPM-GPG-KEY/RPM-GPG-KEY-Jenkins</a><br>  enabled=1<br>  priority=1</p></li><li><p>缓存yum源</p><figure class="highlight plain"><figcaption><span>clean all && yum makecache fast</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="安装ambar"><a href="#安装ambar" class="headerlink" title="安装ambar"></a>安装ambar</h2><h3 id="安装mariadb"><a href="#安装mariadb" class="headerlink" title="安装mariadb"></a>安装mariadb</h3><pre><code>yum install mariadb-server -ysystemctl start mariadbmysql_secure_installation # 直接确定，然后设置root密码# 创建数据库：MariaDB [(none)]&gt; create database ambari default character set utf8;Query OK, 1 row affected (0.00 sec)MariaDB [(none)]&gt; grant all on ambari.* to ambari@localhost identified by &apos;ambari&apos;;Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; grant all on ambari.* to ambari@&apos;%&apos; identified by &apos;ambari&apos;;Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; create database hive default character set utf8;Query OK, 1 row affected (0.00 sec)MariaDB [(none)]&gt; grant all on hive.* to hive@localhost identified by &apos;ambari&apos;;Query OK, 0 rows affected (0.00 sec)MariaDB [(none)]&gt; grant all on hive.* to hive@&apos;%&apos; identified by &apos;ambari&apos;;</code></pre><h3 id="安装ambari-server"><a href="#安装ambari-server" class="headerlink" title="安装ambari-server"></a>安装ambari-server</h3><pre><code>yum install ambari-server -yambari-server setup</code></pre><blockquote><p>安装过程中要选择数据库，如果出现如下警告：按照提示放入jdbc驱动jar包，并配置路径即可<br>WARNING: Before starting Ambari Server, you must copy the MySQL JDBC driver JAR file to /usr/&gt; share/java and set property “server.jdbc.driver.path=[path/to/custom_jdbc_driver]” in ambari.properties.</p></blockquote><pre><code>vim /etc/ambari-server/conf/ambari.properties server.jdbc.driver.path=/usr/share/java/mysql-connector-java-5.1.34.jarUsing python  /usr/bin/pythonSetup ambari-serverChecking SELinux...SELinux status is &apos;enabled&apos;SELinux mode is &apos;permissive&apos;WARNING: SELinux is set to &apos;permissive&apos; mode and temporarily disabled.OK to continue [y/n] (y)? yCustomize user account for ambari-server daemon [y/n] (n)? yEnter user account for ambari-server daemon (root):ambariAdjusting ambari-server permissions and ownership...Checking firewall status...Checking JDK...Do you want to change Oracle JDK [y/n] (n)? y[1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8[2] Oracle JDK 1.7 + Java Cryptography Extension (JCE) Policy Files 7[3] Custom JDK==============================================================================Enter choice (1): 3WARNING: JDK must be installed on all hosts and JAVA_HOME must be valid on all hosts.WARNING: JCE Policy files are required for configuring Kerberos security. If you plan to use Kerberos,please make sure JCE Unlimited Strength Jurisdiction Policy Files are valid on all hosts.Path to JAVA_HOME: /home/java/jreValidating JDK on Ambari Server...done.Checking GPL software agreement...GPL License for LZO: https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.htmlEnable Ambari Server to download and install GPL Licensed LZO packages [y/n] (n)? nCompleting setup...Configuring database...Enter advanced database configuration [y/n] (n)? yConfiguring database...==============================================================================Choose one of the following options:[1] - PostgreSQL (Embedded)[2] - Oracle[3] - MySQL / MariaDB[4] - PostgreSQL[5] - Microsoft SQL Server (Tech Preview)[6] - SQL Anywhere[7] - BDB==============================================================================Enter choice (3): 3Hostname (localhost): Port (3306): Database name (ambari): Username (ambari): Enter Database Password (ambari): Configuring ambari database...Configuring remote database connection properties...WARNING: Before starting Ambari Server, you must run the following DDL against the database to create the schema: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sqlProceed with configuring remote database connection properties [y/n] (y)? n^Hyinput not recognized, please try again: Proceed with configuring remote database connection properties [y/n] (y)? yExtracting system views...ambari-admin-2.6.1.0.143.jar...........Adjusting ambari-server permissions and ownership...Ambari Server &apos;setup&apos; completed successfully.</code></pre><h3 id="启动ambari-server"><a href="#启动ambari-server" class="headerlink" title="启动ambari-server"></a>启动ambari-server</h3><pre><code>ambari-server start</code></pre><blockquote><p>启动失败，查看日志：tail /var/log/ambari-server.log<br>Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table ‘ambari.metainfo’ doesn’t exist</p></blockquote><pre><code>导入表后再次启动mysql -uroot -p ambari &lt; /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql</code></pre><ul><li><p>测试访问：node1:8080</p><p>  默认监听8080端口，如果失败，查看日志。使用默认账户admin/admin登录，界面如下</p><p>  <img src="https://i.imgur.com/Qw3fYfC.png" alt="管理界面"></p></li></ul><h2 id="创建数据平台"><a href="#创建数据平台" class="headerlink" title="创建数据平台"></a>创建数据平台</h2><h3 id="选择Launch-Install-Wizard"><a href="#选择Launch-Install-Wizard" class="headerlink" title="选择Launch Install Wizard"></a>选择Launch Install Wizard</h3><pre><code>![step0](https://i.imgur.com/ly0mo2a.png)</code></pre><h3 id="配置为本地仓库"><a href="#配置为本地仓库" class="headerlink" title="配置为本地仓库"></a>配置为本地仓库</h3><pre><code>![配置本地仓库](https://i.imgur.com/AAJH4Tv.png)</code></pre><h3 id="添加主机节点"><a href="#添加主机节点" class="headerlink" title="添加主机节点"></a>添加主机节点</h3><pre><code>    The user account used to install the Ambari Agent on the target host(s) via SSH. This user must be set up with passwordless SSH and sudo access on all the target host(s)    添加主节点node1私钥id_rsa，必须能够免秘钥登录其他节点安装ambari agent![配置节点](https://i.imgur.com/yY2LyF4.png)</code></pre><h3 id="Confirm-Hosts"><a href="#Confirm-Hosts" class="headerlink" title="Confirm Hosts"></a>Confirm Hosts</h3><pre><code>在这一步可能碰见很多问题，执行之前一定要用tail -f实时查看日志，注意查看的是<figure class="highlight plain"><figcaption><span>-f</span><a href="/var/log/ambari-server/ambari-server.log">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>&gt; 错误示例一：&gt; 查看openssl版本没有问题，更改所有ambari-client配置：在[security]单元下添加：force_https_protocol=PROTOCOL_TLSv1_2<figure class="highlight plain"><figcaption><span>/etc/ambari-agent/conf/ambari-agent.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>    ERROR 2018-06-17 12:50:36,164 NetUtil.py:96 - EOF occurred in violation of protocol (_ssl.c:765)    ERROR 2018-06-17 12:50:36,164 NetUtil.py:97 - SSLError: Failed to connect. Please check openssl library versions.     ......    ......    INFO 2018-06-17 12:50:35,295 main.py:437 - Connecting to Ambari server at https://node1:8440 (192.168.107.74)    INFO 2018-06-17 12:50:35,295 NetUtil.py:70 - Connecting to https://node1:8440/ca    ERROR 2018-06-17 12:50:36,164 NetUtil.py:96 - EOF occurred in violation of protocol (_ssl.c:765)    ERROR 2018-06-17 12:50:36,164 NetUtil.py:97 - SSLError: Failed to connect. Please check openssl library versions.     Refer to: https://bugzilla.redhat.com/show_bug.cgi?id=1022468 for more details.&gt; 错误示例二：&gt; 不能创建文件夹，赋予权限，ambari-server在确认主机和分配服务均需要被操作<figure class="highlight plain"><figcaption><span>-R ambari</span><a href="/var/run/ambari-server">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>    17 Jun 2018 12:20:23,259 ERROR [Thread-35] BSRunner:441 - java.io.FileNotFoundException: /var/run/ambari-server/bootstrap/1/node1.done (No such file or directory)    17 Jun 2018 12:20:23,260  WARN [Thread-35] BSRunner:401 - File does not exist: /var/run/ambari-server/bootstrap/1/sshKey    17 Jun 2018 12:41:20,217  INFO [Thread-37] BSRunner:189 - Kicking off the scheduler for polling on logs in /var/run/ambari-server/bootstrap/1&gt; 错误示例三：&gt; 注意主节点信任主机.ssh/known_hosts以及免秘钥登录除了客户机也必须要有自己，如果成功则如下：</code></pre><p><img src="https://i.imgur.com/meXkLyF.png" alt="确认主机"></p><h3 id="选择服务"><a href="#选择服务" class="headerlink" title="选择服务"></a>选择服务</h3><blockquote><p>根据自己系统配置，建议可以一个个添加，比如先添加HDFS、YARN和MapReduce</p></blockquote><p><img src="https://i.imgur.com/6NR59vZ.png" alt="选择服务"></p><h3 id="assign-master"><a href="#assign-master" class="headerlink" title="assign master"></a>assign master</h3><p>相当于做集群配置<br><img src="https://i.imgur.com/namV8ua.png" alt="指派master"></p><h3 id="主从分配"><a href="#主从分配" class="headerlink" title="主从分配"></a>主从分配</h3><p><img src="https://i.imgur.com/AmndrgO.png" alt="主从分配"></p><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>红色的表示还需要进一步配置，数据库登录，根据提示来即可<br>之前已经添加了jdbc驱动，因此这里只要执行：<br><figure class="highlight plain"><figcaption><span>setup --jdbc-db</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">![自定义配置](https://i.imgur.com/ZnrSK6B.png)</span><br><span class="line"></span><br><span class="line">## 测试MapReduce</span><br><span class="line">**注意：root用户是不能操作hdfs文件系统的，当然可以更改hdfs-site.xml关闭权限验证，不过建议切换hdfs用户来操作**</span><br></pre></td></tr></table></figure></p><pre><code>su hdfs &amp;&amp; cd ~</code></pre><p><code>`</code></p><ul><li><p>创建文件wc.txt，同时将文件上传到hdfs</p><pre><code>vi wc.txt    hadoop hello world    zk hello hadoop    hbase hive    zk sparkhadoop fs -mkdir /tmp/inputhadoop fs -put wc.txt /tmp/input# 执行MapReduce，根据自己的版本和文件选择hdp的示例，或者使用自己的jar包hadoop jar /usr/hdp/2.6.4.0-91/hadoop-mapreduce/hadoop-mapreduce-examples-2.7.3.2.6.4.0-91.jar wordcount /tmp/input/wc.txt /tmp/output</code></pre></li><li><p>官方示例源码</p><p>  <a href="http://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html#Source_Code" title="官方示例源码" target="_blank" rel="noopener">http://hadoop.apache.org/docs/current/hadoop-mapreduce-client/hadoop-mapreduce-client-core/MapReduceTutorial.html#Source_Code</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h1&gt;&lt;h2 id=&quot;准备节点&quot;&gt;&lt;a href=&quot;#准备节点&quot; class=&quot;headerlink&quot; title=&quot;准备节点&quot;&gt;&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用拦截器进行数据加解密</title>
    <link href="http://yoursite.com/2018/05/18/cryptic_interceptor/"/>
    <id>http://yoursite.com/2018/05/18/cryptic_interceptor/</id>
    <published>2018-05-18T08:35:04.819Z</published>
    <updated>2018-05-18T08:36:57.264Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文并非详细探讨AES加解密内容，而是在Spring+Mybatis的项目基础上，以sql拦截器的形式，实现了对数据存取加解密的方案。文章项目示例采用springboot框架，对需要加解密的字段添加注解，sql执行过程中，拦截器进行拦截。可通过配置加解密开关决定是否对字段进行加解密。加密方式AES。</p></blockquote><p>文章并未列出所有源码，依赖包等详细配置，在源码中有具体的sql脚本等文件，<a href="https://github.com/Yampery/cryptic-data" target="_blank" rel="noopener">点击访问项目源码。</a></p><ul><li>源码框架<blockquote><p>java8   springboot   mybatis   gradle</p></blockquote></li></ul><hr><h2 id="加解密工具"><a href="#加解密工具" class="headerlink" title="加解密工具"></a>加解密工具</h2><blockquote><p>方法generateAESKey()生成128位秘钥，以16进制字符串保存，从配置文件读取，以单例模式初始化加解密工具，保证项目运行过程中对象不会被重新创建，避免多次初始化Cipher。加解密方法详见代码如下。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @decription ADESUtils</span><br><span class="line"> * &lt;p&gt;字段加解密，使用MySql AES算法&lt;/p&gt;</span><br><span class="line"> * @author Yampery</span><br><span class="line"> * @date 2018/4/4 13:10</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class ADESUtils &#123;</span><br><span class="line">    private static final String ENCRYPT_TYPE = &quot;AES&quot;;</span><br><span class="line">    private static final String ENCODING = &quot;UTF-8&quot;;</span><br><span class="line"></span><br><span class="line">    // 密盐</span><br><span class="line">    private static String aesSalt;</span><br><span class="line">    private static ADESUtils adesUtils;</span><br><span class="line">    private static Cipher encryptCipher;    // 加密cipher</span><br><span class="line">    private static Cipher decryptChipher;   // 解密chipher</span><br><span class="line"></span><br><span class="line">    // 加解密开关，从配置获取</span><br><span class="line">    private static String CRYPTIC_SWITCH;</span><br><span class="line">    /**</span><br><span class="line">     * 从配置中获取秘钥</span><br><span class="line">     * :默认值填写自己生成的秘钥</span><br><span class="line">     * @param key</span><br><span class="line">     */</span><br><span class="line">    @Value(&quot;$&#123;sys.aes.salt:0&#125;&quot;)</span><br><span class="line">    public void setAESSalt(String key)&#123;</span><br><span class="line">        ADESUtils.aesSalt = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取开关</span><br><span class="line">     * 默认为不加密</span><br><span class="line">     * @param val</span><br><span class="line">     */</span><br><span class="line">    @Value(&quot;$&#123;sys.aes.switch:0&#125;&quot;)</span><br><span class="line">    public void setCrypticSwitch(String val) &#123;</span><br><span class="line">        ADESUtils.CRYPTIC_SWITCH = val;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * encryptCipher、decryptChipher初始化</span><br><span class="line">     */</span><br><span class="line">    public static void init()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            encryptCipher = Cipher.getInstance(ENCRYPT_TYPE);</span><br><span class="line">            decryptChipher = Cipher.getInstance(ENCRYPT_TYPE);</span><br><span class="line">            encryptCipher.init(Cipher.ENCRYPT_MODE, generateMySQLAESKey(aesSalt));</span><br><span class="line">            decryptChipher.init(Cipher.DECRYPT_MODE, generateMySQLAESKey(aesSalt));</span><br><span class="line">        &#125; catch (InvalidKeyException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125; catch (NoSuchPaddingException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ADESUtils() &#123;  &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取单例</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static ADESUtils getInstance()&#123;</span><br><span class="line">        if(adesUtils == null)&#123;</span><br><span class="line">            // 当需要创建的时候在加锁</span><br><span class="line">            synchronized(ADESUtils.class) &#123;</span><br><span class="line">                if (adesUtils == null) &#123;</span><br><span class="line">                    adesUtils = new ADESUtils();</span><br><span class="line">                    init();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return adesUtils;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对明文加密</span><br><span class="line">     * @param pString</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String encrypt(String pString) &#123;</span><br><span class="line"></span><br><span class="line">        if (StringUtils.isBlank(pString) || StringUtils.equals(&quot;0&quot;, CRYPTIC_SWITCH))</span><br><span class="line">            return StringUtils.trimToEmpty(pString);</span><br><span class="line">        try&#123;</span><br><span class="line">            return new String(Hex.encodeHex(encryptCipher.doFinal(pString.getBytes(ENCODING)))).toUpperCase();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return pString;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对密文解密</span><br><span class="line">     * @param eString</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String decrypt(String eString) &#123;</span><br><span class="line">        if (StringUtils.isBlank(eString) || StringUtils.equals(&quot;0&quot;, CRYPTIC_SWITCH))</span><br><span class="line">            return StringUtils.trimToEmpty(eString);</span><br><span class="line">        try &#123;</span><br><span class="line">            return new String(decryptChipher.doFinal(Hex.decodeHex(eString.toCharArray())));</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return eString;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 产生mysql-aes_encrypt</span><br><span class="line">     * @param key 加密的密盐</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static SecretKeySpec generateMySQLAESKey(final String key) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            final byte[] finalKey = new byte[16];</span><br><span class="line">            int i = 0;</span><br><span class="line">            for(byte b : Hex.decodeHex(key.toCharArray()))</span><br><span class="line">                finalKey[i++ % 16] ^= b;</span><br><span class="line">            return new SecretKeySpec(finalKey, &quot;AES&quot;);</span><br><span class="line">        &#125; catch(Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成秘钥(128位)</span><br><span class="line">     * @return</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    public static String generateAESKey() throws Exception&#123;</span><br><span class="line">        //实例化</span><br><span class="line">        KeyGenerator kgen = KeyGenerator.getInstance(&quot;AES&quot;);</span><br><span class="line">        //设置密钥长度</span><br><span class="line">        kgen.init(128);</span><br><span class="line">        //生成密钥</span><br><span class="line">        SecretKey skey = kgen.generateKey();</span><br><span class="line">        // 转为16进制字串</span><br><span class="line">        String key = new String(Hex.encodeHex(skey.getEncoded()));</span><br><span class="line">        //返回密钥的16进制字串</span><br><span class="line">        return key.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="加解密字段注解"><a href="#加解密字段注解" class="headerlink" title="加解密字段注解"></a>加解密字段注解</h2><blockquote><p>注解标识字段是否需要加密或者解密，用于通过反射获取需要进行加解密的字段，防止需求变动，将加密和解密注解分开。</p></blockquote><h3 id="加密注解"><a href="#加密注解" class="headerlink" title="加密注解"></a>加密注解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @decription EncryptField</span><br><span class="line"> * &lt;p&gt;字段加密注解&lt;/p&gt;</span><br><span class="line"> * @author Yampery</span><br><span class="line"> * @date 2017/10/24 13:01</span><br><span class="line"> */</span><br><span class="line">@Target(ElementType.FIELD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface EncryptField &#123;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解密注解"><a href="#解密注解" class="headerlink" title="解密注解"></a>解密注解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @decription DecryptField</span><br><span class="line"> * &lt;p&gt;字段解密注解&lt;/p&gt;</span><br><span class="line"> * @author Yampery</span><br><span class="line"> * @date 2017/10/24 13:05</span><br><span class="line"> */</span><br><span class="line">@Target(ElementType.FIELD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface DecryptField &#123;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="封装加解密工具"><a href="#封装加解密工具" class="headerlink" title="封装加解密工具"></a>封装加解密工具</h2><blockquote><p>为了在项目中方便使用，将上节中的加解密工具进行封装，封装后的工具可以作用于对象，通过反射获取注解，而对原对象进行改变。另外，项目中也实现了对象的自加解密CrypticPojo，原理是CrypticPojo实现clone方法，并在内部实现加解密方法，需要进行字段加解密的业务对象只需要继承CrypticPojo，每次返回调用一次克隆并加密方法即可，具体见源码。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @decription CryptPojoUtils</span><br><span class="line"> * &lt;p&gt;对象加解密工具</span><br><span class="line"> * 其子类可以通过调用&lt;tt&gt;encrypt(T t)&lt;/tt&gt;方法实现自加密，返回参数类型；</span><br><span class="line"> * 调用&lt;tt&gt;decrypt(T t)&lt;/tt&gt;实现自解密，返回参数类型；</span><br><span class="line"> * &lt;tt&gt;encrypt&lt;/tt&gt;对注解&#123;@link EncryptField&#125;字段有效；</span><br><span class="line"> * &lt;tt&gt;decrypt&lt;/tt&gt;对注解&#123;@link DecryptField&#125;字段有效。&lt;/p&gt;</span><br><span class="line"> * @author Yampery</span><br><span class="line"> * @date 2017/10/24 13:36</span><br><span class="line"> */</span><br><span class="line">public class CryptPojoUtils &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对对象t加密</span><br><span class="line">     * @param t</span><br><span class="line">     * @param &lt;T&gt;</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; T encrypt(T t) &#123;</span><br><span class="line">        Field[] declaredFields = t.getClass().getDeclaredFields();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (declaredFields != null &amp;&amp; declaredFields.length &gt; 0) &#123;</span><br><span class="line">                for (Field field : declaredFields) &#123;</span><br><span class="line">                    if (field.isAnnotationPresent(EncryptField.class) &amp;&amp; field.getType().toString().endsWith(&quot;String&quot;)) &#123;</span><br><span class="line">                        field.setAccessible(true);</span><br><span class="line">                        String fieldValue = (String) field.get(t);</span><br><span class="line">                        if (StringUtils.isNotEmpty(fieldValue)) &#123;</span><br><span class="line">                            field.set(t, ADESUtils.getInstance().encrypt(fieldValue));</span><br><span class="line">                        &#125;</span><br><span class="line">                        field.setAccessible(false);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对象解密</span><br><span class="line">     * @param t</span><br><span class="line">     * @param &lt;T&gt;</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; T decrypt(T t) &#123;</span><br><span class="line">        Field[] declaredFields = t.getClass().getDeclaredFields();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (declaredFields != null &amp;&amp; declaredFields.length &gt; 0) &#123;</span><br><span class="line">                for (Field field : declaredFields) &#123;</span><br><span class="line">                    if (field.isAnnotationPresent(DecryptField.class) &amp;&amp; field.getType().toString().endsWith(&quot;String&quot;)) &#123;</span><br><span class="line">                        field.setAccessible(true);</span><br><span class="line">                        String fieldValue = (String)field.get(t);</span><br><span class="line">                        if(StringUtils.isNotEmpty(fieldValue)) &#123;</span><br><span class="line">                            field.set(t, ADESUtils.getInstance().decrypt(fieldValue));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对含注解字段解密</span><br><span class="line">     * @param t</span><br><span class="line">     * @param &lt;T&gt;</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; void decryptField(T t) &#123;</span><br><span class="line">        Field[] declaredFields = t.getClass().getDeclaredFields();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (declaredFields != null &amp;&amp; declaredFields.length &gt; 0) &#123;</span><br><span class="line">                for (Field field : declaredFields) &#123;</span><br><span class="line">                    if (field.isAnnotationPresent(DecryptField.class) &amp;&amp; field.getType().toString().endsWith(&quot;String&quot;)) &#123;</span><br><span class="line">                        field.setAccessible(true);</span><br><span class="line">                        String fieldValue = (String)field.get(t);</span><br><span class="line">                        if(StringUtils.isNotEmpty(fieldValue)) &#123;</span><br><span class="line">                            field.set(t, ADESUtils.getInstance().decrypt(fieldValue));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        // return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对含注解字段加密</span><br><span class="line">     * @param t</span><br><span class="line">     * @param &lt;T&gt;</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; void encryptField(T t) &#123;</span><br><span class="line">        Field[] declaredFields = t.getClass().getDeclaredFields();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (declaredFields != null &amp;&amp; declaredFields.length &gt; 0) &#123;</span><br><span class="line">                for (Field field : declaredFields) &#123;</span><br><span class="line">                    if (field.isAnnotationPresent(EncryptField.class) &amp;&amp; field.getType().toString().endsWith(&quot;String&quot;)) &#123;</span><br><span class="line">                        field.setAccessible(true);</span><br><span class="line">                        String fieldValue = (String)field.get(t);</span><br><span class="line">                        if(StringUtils.isNotEmpty(fieldValue)) &#123;</span><br><span class="line">                            field.set(t, ADESUtils.getInstance().encrypt(fieldValue));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 隐藏号码中间4位</span><br><span class="line">     * @param t</span><br><span class="line">     * @param &lt;T&gt;</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; void hidePhone(T t) &#123;</span><br><span class="line">        Field[] declaredFields = t.getClass().getDeclaredFields();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (declaredFields != null &amp;&amp; declaredFields.length &gt; 0) &#123;</span><br><span class="line">                for (Field field : declaredFields) &#123;</span><br><span class="line">                    if (field.isAnnotationPresent(DecryptField.class) &amp;&amp; field.getType().toString().endsWith(&quot;String&quot;)) &#123;</span><br><span class="line">                        field.setAccessible(true);</span><br><span class="line">                        String fieldValue = (String)field.get(t);</span><br><span class="line">                        if(StringUtils.isNotEmpty(fieldValue)) &#123;</span><br><span class="line">                            // 暂时与解密注解共用一个注解，该注解隐藏手机号中间四位</span><br><span class="line">                            field.set(t, StringUtils.overlay(fieldValue, &quot;****&quot;, 3, 7));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><blockquote><p>使用sql拦截器处理加解密基本是对项目影响比较小的。该拦截器通过拦截sql，对写入数据和查询结果进行重写，然后再放行从而更改对象。<br>关于sql语句参数，文章中并没有在拦截器处理，而是使用一个LinkedMap封装了查询参数，在封装的过程中会对字段进行加密。<br>关于springboot中和spring中拦截器使用的区别下文将会介绍。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @decription DBInterceptor</span><br><span class="line"> * &lt;p&gt;实现Mybatis拦截器，用于拦截修改，插入和返回需要加密或者解密的对象&lt;/p&gt;</span><br><span class="line"> * @author Yampery</span><br><span class="line"> * @date 2018/4/4 14:17</span><br><span class="line"> */</span><br><span class="line">@Intercepts(&#123;</span><br><span class="line">        @Signature(type=Executor.class,method=&quot;update&quot;,args=&#123;MappedStatement.class,Object.class&#125;),</span><br><span class="line">        @Signature(type=Executor.class,method=&quot;query&quot;,args=&#123;MappedStatement.class,Object.class,RowBounds.class,ResultHandler.class&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">@Component</span><br><span class="line">public class DBInterceptor implements Interceptor &#123;</span><br><span class="line">    private final Logger logger = LoggerFactory.getLogger(DBInterceptor.class);</span><br><span class="line">    @Value(&quot;$&#123;sys.aes.switch&#125;&quot;) private String CRYPTIC_SWITCH;</span><br><span class="line">    @Override</span><br><span class="line">    public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class="line">        MappedStatement statement = (MappedStatement) invocation.getArgs()[0];</span><br><span class="line">        String methodName = invocation.getMethod().getName();</span><br><span class="line">        Object parameter = invocation.getArgs()[1];</span><br><span class="line">        BoundSql sql = statement.getBoundSql(parameter);</span><br><span class="line">        logger.info(&quot;sql is: &#123;&#125;&quot;, sql.getSql());</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * @TODO 处理查询</span><br><span class="line">         */</span><br><span class="line">        if (StringUtils.equalsIgnoreCase(&quot;query&quot;, methodName)) &#123;</span><br><span class="line">            /**</span><br><span class="line">             * 在这里可以处理查询参数，如传递的参数为明文，要按照密文查询</span><br><span class="line">             * 本文选择使用同一参数封装处理方案&#123;@link git.yampery.cryptic.common.QueryParams&#125;</span><br><span class="line">             */</span><br><span class="line">        &#125;</span><br><span class="line">        /**</span><br><span class="line">         * 拦截批量插入操作不仅繁琐，而且为了通用逐一通过反射加密不妥</span><br><span class="line">         * 如果有批量操作，最好在传递参数之前，向list中添加之前就加密</span><br><span class="line">         */</span><br><span class="line">        if (!&quot;0&quot;.equals(CRYPTIC_SWITCH)) &#123;</span><br><span class="line">            if (StringUtils.equalsIgnoreCase(&quot;update&quot;, methodName)</span><br><span class="line">                    || StringUtils.equalsIgnoreCase(&quot;insert&quot;, methodName)) &#123;</span><br><span class="line">                CryptPojoUtils.encryptField(parameter);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object returnValue = invocation.proceed();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            if (!&quot;0&quot;.equals(CRYPTIC_SWITCH)) &#123;</span><br><span class="line">                if (returnValue instanceof ArrayList&lt;?&gt;) &#123;</span><br><span class="line">                    List&lt;?&gt; list = (ArrayList&lt;?&gt;) returnValue;</span><br><span class="line">                    if (null == list || 1 &gt; list.size())</span><br><span class="line">                        return returnValue;</span><br><span class="line">                    Object obj = list.get(0);</span><br><span class="line">                    if (null == obj)  // 这里虽然list不是空，但是返回字符串等有可能为空</span><br><span class="line">                        return returnValue;</span><br><span class="line">                    // 判断第一个对象是否有DecryptField注解</span><br><span class="line">                    Field[] fields = obj.getClass().getDeclaredFields();</span><br><span class="line">                    int len;</span><br><span class="line">                    if (null != fields &amp;&amp; 0 &lt; (len = fields.length)) &#123;</span><br><span class="line">                        // 标记是否有解密注解</span><br><span class="line">                        boolean isD = false;</span><br><span class="line">                        for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">                            /**</span><br><span class="line">                             * 由于返回的是同一种类型列表，因此这里判断出来之后可以保存field的名称</span><br><span class="line">                             * 之后处理所有对象直接按照field名称查找Field从而改之即可</span><br><span class="line">                             * 有可能该类存在多个注解字段，所以需要保存到数组（项目中目前最多是2个）</span><br><span class="line">                             * @TODO 保存带DecryptField注解的字段名称到数组，按照名称获取字段并解密</span><br><span class="line">                             * */</span><br><span class="line">                            if (fields[i].isAnnotationPresent(DecryptField.class)) &#123;</span><br><span class="line">                                isD = true;</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; /// for end ~</span><br><span class="line">                        if (isD)  // 将含有DecryptField注解的字段解密</span><br><span class="line">                            list.forEach(l -&gt; CryptPojoUtils.decryptField(l));</span><br><span class="line">                    &#125; /// if end ~</span><br><span class="line">                &#125; /// if end ~</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            // 打印异常，由于拦截器本身抛出异常，比如拦截到很奇葩的返回，应算正常</span><br><span class="line">            // 直接返回原结果即可</span><br><span class="line">            logger.info(&quot;抛出异常，正常返回==&gt; &quot; + e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return returnValue;</span><br><span class="line">        &#125;</span><br><span class="line">        return returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object plugin(Object target) &#123;</span><br><span class="line">        return Plugin.wrap(target, this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setProperties(Properties properties) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不同框架配置说明"><a href="#不同框架配置说明" class="headerlink" title="不同框架配置说明"></a>不同框架配置说明</h2><h3 id="springboot下的配置"><a href="#springboot下的配置" class="headerlink" title="springboot下的配置"></a>springboot下的配置</h3><ul><li>启动主类需要添加mapper扫描注解</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;git.yampery.cryptic.dao&quot;)</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置文件application.properties需要添加映射</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Mybatis</span><br><span class="line">mybatis.config-location             =classpath:mybatis/mybatis-config.xml</span><br><span class="line">mybatis.mapper-locations            =classpath:mybatis/mapper/*.xml</span><br><span class="line">mybatis.type-aliases-package        =git.yampery.cryptic.pojo</span><br><span class="line"></span><br><span class="line"># 开启debug模式可以在控制台查看springboot加载流程</span><br><span class="line"># debug                               =true</span><br><span class="line"></span><br><span class="line"># 密盐（使用工具ADESUtils生成）</span><br><span class="line">sys.aes.salt                        =4BB90812C2B9B0882A6FA7C203E4717F</span><br><span class="line"># 加解密开关（1：开启加解密；0：关闭加解密）</span><br><span class="line">sys.aes.switch                      =1</span><br></pre></td></tr></table></figure><ul><li>拦截器会自动扫描，注意@Component注解</li></ul><h3 id="spring的xml配置"><a href="#spring的xml配置" class="headerlink" title="spring的xml配置"></a>spring的xml配置</h3><ul><li>mybatis当然和传统配置一致，在spring上下文配置中添加</li><li>拦截器配置，在spring上下文配置文件sqlsessionfactory中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis.xml&quot; /&gt;</span><br><span class="line">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span><br><span class="line">&lt;property name=&quot;mapperLocations&quot;&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;value&gt;classpath:mybatis/mapper/*.xml&lt;/value&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;plugins&quot;&gt;</span><br><span class="line">&lt;array&gt;</span><br><span class="line">&lt;bean class=&quot;git.yampery.cryptic.interceptor.DBInterceptor&quot;&gt;</span><br><span class="line">&lt;property name=&quot;properties&quot; value=&quot;property-value&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">&lt;property name=&quot;basePackage&quot; value=&quot;git.yampery.cryptic.dao&quot; /&gt;</span><br><span class="line">&lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>注意：文章中的代码只是部分，源码包含完整的测试和说明，<a href="https://github.com/Yampery/cryptic-data" target="_blank" rel="noopener">点击访问项目源码。</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文并非详细探讨AES加解密内容，而是在Spring+Mybatis的项目基础上，以sql拦截器的形式，实现了对数据存取加解密的方案。文章项目示例采用springboot框架，对需要加解密的字段添加注解，sql执行过程中，拦截器进行拦截。可通过配置
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于docker搭建ELK系统</title>
    <link href="http://yoursite.com/2018/05/18/docker_elk/"/>
    <id>http://yoursite.com/2018/05/18/docker_elk/</id>
    <published>2018-05-18T08:21:02.512Z</published>
    <updated>2018-05-18T08:22:55.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础镜像-elkbase-v1-0"><a href="#基础镜像-elkbase-v1-0" class="headerlink" title="基础镜像 elkbase:v1.0"></a>基础镜像 elkbase:v1.0</h2><ul><li>准备jdk 放在tools文件夹下</li><li><p>准备Dockerfile</p><pre><code>FROM centos:latestMAINTAINER Yampery&lt;yampery@163.com&gt;VOLUME [ &quot;/opt/product/data/&quot; ]RUN  /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeRUN /bin/echo -e &quot;ZONE=&quot;Asia/Shanghai&quot;\nUTC=false\nRTC=false&quot; &gt; /etc/sysconfig/clockRUN mkdir /opt/product/tools/ADD ./tools /opt/product/tools/ENV JAVA_HOME /opt/product/tools/jdk-9.0.1CMD [&quot;/usr/sbin/init&quot;]</code></pre></li><li><p>构建文件结构</p><pre><code>|-elk    |-tools        |-jdk-9.0.1    |--Dockerfile</code></pre></li><li><p>构建镜像</p><pre><code>elk/elkbase$ docker build -t elkbase:v1.0 . </code></pre></li></ul><h2 id="elasticsearch-v1-0"><a href="#elasticsearch-v1-0" class="headerlink" title="elasticsearch:v1.0"></a>elasticsearch:v1.0</h2><ul><li><p>准备elasticsearch</p><pre><code>https://www.elastic.co/downloads/elasticsearch</code></pre></li><li><p>准备Dockerfile</p><pre><code>FROM elkbase:v1.0MAINTAINER Yampery&lt;yampery@163.com&gt;VOLUME [ &quot;/opt/product/data/&quot; ]ADD ./tools /opt/product/RUN useradd elk &amp;&amp; chown -R elk:elk /opt/product/elasticsearch-6.0.0ADD build.sh /root/RUN chmod +x /root/build.shEXPOSE 9200EXPOSE 9300ENTRYPOINT [&quot;/root/build.sh&quot;]CMD [&quot;/usr/sbin/init&quot;]</code></pre></li><li><p>准备脚本build.sh</p><pre><code>#!/bin/bashecho &quot;* soft nofile 65536&quot; &gt; /etc/security/limits.conf echo &quot;* hard nofile 131072&quot; &gt; /etc/security/limits.confecho &quot;* soft nproc 2048&quot; &gt; /etc/security/limits.confecho &quot;* hard nproc 4096&quot; &gt; /etc/security/limits.confecho &quot;vm.max_map_count=655360&quot; &gt; /etc/sysctl.conf sysctl -pcd /opt/product/elasticsearch-6.0.0/config/rm -rf elasticsearch.ymlcp /opt/product/data/elk/elasticsearch.yml .chown -R elk:elk /opt/product/elasticsearch-6.0.0chown -R elk:elk /opt/product/data/elk/elasticsearchdatasu - elk &lt;&lt;!export JAVA_HOME=/opt/product/tools/jdk-9.0.1export PATH=$JAVA_HOME/bin:$PATH /opt/product/elasticsearch-6.0.0/bin/elasticsearch</code></pre></li><li><p>构建目录结构</p><pre><code>|-elk    |-elasticsearch        |-tools        |--Dockerfile        |--build.sh</code></pre></li><li><p>构建镜像</p><pre><code>elk/elasticsearch$ docker build -f elasticsearch:v1.0 .</code></pre></li><li><p>配置</p><pre><code>在/opt/product/data目录下建立elk目录，并拷贝elasticsearch.yml文件到该目录path.data: /opt/product/data/elk/elasticsearchdatanetwork.host: 0.0.0.0在/opt/product/data/elk目录 创建 elasticsearchdata 目录</code></pre></li><li><p>运行容器 </p><pre><code>docker run --name elasticsearch --privileged --restart=always -d -ti -v /opt/product/data:/opt/product/data -p 9200:9200 -p 9300:9300 elasticsearch:v1.0 /bin/bash</code></pre><p>  -&gt; 访问：ip:9200/</p></li></ul><h2 id="logstash"><a href="#logstash" class="headerlink" title="logstash"></a>logstash</h2><hr><ul><li><p>准备logstash    </p><pre><code>https://www.elastic.co/downloads/logstash    </code></pre></li><li><p>准备Dockerfile</p><pre><code>FROM elkbase:v1.0MAINTAINER Yampery&lt;yampery@163.com&gt;VOLUME [ &quot;/opt/product/data/&quot; ]ADD ./tools /opt/product/ADD build.sh /root/RUN chmod +x /root/build.shEXPOSE 5044EXPOSE 4560EXPOSE 8080ENTRYPOINT [&quot;/root/build.sh&quot;]CMD [&quot;/usr/sbin/init&quot;]</code></pre></li><li><p>准备脚本 build.sh</p><pre><code>#!/bin/bashexport JAVA_HOME=/opt/product/tools/jdk-9.0.1export PATH=$JAVA_HOME/bin:$PATHJAVA_OPTS=&quot;$JAVA_OPTS -Dfile.encoding=UTF8  -Duser.timezone=GMT+08&quot;cd /opt/product/logstash-6.0.0/config/rm -rf logstash.ymlcp /opt/product/data/elk/logstash.yml logstash.yml/opt/product/logstash-6.0.0/bin/logstash -f /opt/product/data/elk/logstash.conf</code></pre></li><li><p>目录结构</p><pre><code>|-elk    |-logstash        |-tools        |--Dockerfile        |--build.sh</code></pre></li><li><p>构建镜像</p><pre><code>elk/logstash$ docker build -f logstash:v1.0 .</code></pre></li><li><p>配置logstash</p><pre><code>// 在/opt/product/data/elk目录下创建logstash.confinput {        beats {    port =&gt; &quot;5044&quot;   }}output {   elasticsearch {       hosts =&gt; [&quot;elasticsearch的ip:9200&quot;]       index =&gt; &quot;logstash-tomcat-accesslog-%{+YYYY.MM.dd}&quot;    }       }// 将logstash本身的logstash.yml 拷贝到/opt/product/data/elk目录下// 在/opt/product/data/elk目录下建立 logstashdata目录</code></pre></li><li><p>启动</p><pre><code>docker run --name logstash --restart=always -d -ti -v /opt/product/data:/opt/product/data -p 5044:5044 -p 4560:4560 -p 9090:9090 logstash:v1.0 /bin/bash</code></pre></li></ul><h2 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h2><hr><ul><li><p>准备kibana </p><pre><code>https://artifacts.elastic.co/downloads/kibana/kibana-6.0.0-linux-x86_64.tar.gz</code></pre></li><li><p>准备Dockerfile</p><pre><code>FROM elkbase:v1.0MAINTAINER Yampery&lt;yampery@163.com&gt;VOLUME [ &quot;/opt/product/data/&quot; ]ADD ./tools /opt/product/ADD build.sh /root/RUN chmod +x /root/build.shEXPOSE 5601ENTRYPOINT [&quot;/root/build.sh&quot;]CMD [&quot;/usr/sbin/init&quot;]</code></pre></li><li><p>准备脚本 build.sh</p><pre><code>#!/bin/bash export JAVA_HOME=/opt/product/tools/jdk-9.0.1export PATH=$JAVA_HOME/bin:$PATHcd /opt/product/kibana-6.0.0/config/rm -rf kibana.ymlln -s /opt/product/data/elk/kibana.yml . cd /opt/product/kibana-6.0.0/rm -rf dataln -s  /opt/product/data/elk/kibanadata /opt/product/kibana-6.0.0/data/opt/product/kibana-6.0.0/bin/kibana</code></pre></li><li><p>构建镜像</p><pre><code>elk/kibana$ docker build -t kibana:v1.0 .</code></pre></li><li><p>配置kibana</p><pre><code>// 复制kibana.yml到/opt/product/data/elk 下server.port: 5601server.host: &quot;0.0.0.0&quot;elasticsearch.url: &quot;http://ip:9200&quot;</code></pre></li><li><p>启动</p><pre><code>docker run --name kibana -d -ti -v /opt/product/data:/opt/product/data -p 5601:5601  kibana:v1.0 /bin/bash</code></pre></li><li><p>访问</p><pre><code>ip:5601/</code></pre></li></ul><h2 id="FileBeat"><a href="#FileBeat" class="headerlink" title="FileBeat"></a>FileBeat</h2><hr><ul><li><p>准备FileBeat</p><pre><code>https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.0.0-linux-x86_64.tar.gz</code></pre></li><li><p>准备Dockerfile</p><pre><code>FROM elkbase:v1.0MAINTAINER Yampery&lt;yampery@163.com&gt;VOLUME [ &quot;/opt/product/data/&quot; ]ADD ./tools /opt/product/ADD build.sh /root/RUN chmod +x /root/build.shENTRYPOINT [&quot;/root/build.sh&quot;]CMD [&quot;/usr/sbin/init&quot;]</code></pre></li><li><p>准备脚本 build.sh</p><pre><code>#!/bin/bashexport JAVA_HOME=/opt/product/tools/jdk-9.0.1export PATH=$JAVA_HOME/bin:$PATHcd /opt/product/filebeat-6.0.0/rm -rf filebeat.ymlln -s /opt/product/data/elk/filebeat.yml . rm -rf data ln -s /opt/product/data/elk/filebeatdata /opt/product/filebeat-6.0.0/data/opt/product/filebeat-6.0.0/filebeat -e -c filebeat.yml</code></pre></li><li><p>构建镜像</p><pre><code>elk/filebeat$ docker build -t filebeat:v1.0 .</code></pre></li><li><p>配置filebeat</p><pre><code>// 在/opt/product/data/elk目录下 创建filebeat.ymlfilebeat.prospectors:  - input_type: log    document_type: tomcataccess  paths:     - /opt/product/data/logs/tomcat/localhost_access_log*.txt     - /opt/product/data/epg2logs/tomcat/localhost_access_log*.txtoutput.logstash:  // The Logstash hosts  hosts: [&quot;ip:5044&quot;] // 在/opt/product/data/elk 目录下创建filebeatdata</code></pre></li></ul><ul><li><p>启动</p><pre><code>docker run --name filebeat -d -ti -v /opt/product/data:/opt/product/data filebeat:v1.0 /bin/bash</code></pre></li></ul><h2 id="x-pack"><a href="#x-pack" class="headerlink" title="x-pack"></a>x-pack</h2><ul><li><p>安装    </p><pre><code>./elasticsearch-plugin install x-pack</code></pre></li><li><p>设置密码 </p></li></ul><p><a href="https://www.elastic.co/guide/en/x-pack/current/setting-up-authentication.html#set-built-in-user-passwords" title="es官网参考" target="_blank" rel="noopener">https://www.elastic.co/guide/en/x-pack/current/setting-up-authentication.html#set-built-in-user-passwords</a></p><pre><code>./setup-passwords interactive    Enter password for [elastic]:    Reenter password for [elastic]:    Enter password for [kibana]:    Reenter password for [kibana]:    Enter password for [logstash_system]:    Reenter password for [logstash_system]:    Changed password for user [kibana]    Changed password for user [logstash_system]    Changed password for user [elastic]</code></pre><ul><li><p>logstash配置</p><pre><code>input { stdin { } }output {  elasticsearch {    hosts =&gt; [&quot;192.168.107.23:9200&quot;]    user =&gt; elastic    password =&gt; elastic  }  stdout { codec =&gt; rubydebug }}</code></pre><p><em>同理，kibana也可以配置，调用es接口也需要用户密码</em></p></li></ul><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><hr><p><em>脚本和启动项参数中的/opt/product/data均以自己要设定的挂载目录一致</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础镜像-elkbase-v1-0&quot;&gt;&lt;a href=&quot;#基础镜像-elkbase-v1-0&quot; class=&quot;headerlink&quot; title=&quot;基础镜像 elkbase:v1.0&quot;&gt;&lt;/a&gt;基础镜像 elkbase:v1.0&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;准备jd
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/17/offer/"/>
    <id>http://yoursite.com/2018/05/17/offer/</id>
    <published>2018-05-17T01:14:56.585Z</published>
    <updated>2018-04-11T00:54:16.687Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于Redis的消息队列</title>
    <link href="http://yoursite.com/2018/04/28/redis/rdsmq/"/>
    <id>http://yoursite.com/2018/04/28/redis/rdsmq/</id>
    <published>2018-04-28T09:54:39.922Z</published>
    <updated>2018-05-18T08:24:12.236Z</updated>
    
    <content type="html"><![CDATA[<p>本文以redis为数据结构基础，配合Spring管理机制，使用java实现了一个轻量级、可配置的消息队列。适合的项目特点：</p><ul><li><strong>Spring框架管理对象</strong></li><li><strong>有消息需求，但不想维护mq中间件</strong></li><li><strong>有使用redis</strong></li><li><strong>对消息持久化并没有很苛刻的要求</strong></li></ul><p><em><a href="http://blog.csdn.net/wizard_rp/article/details/79310206" target="_blank" rel="noopener">需要使用rabbitmq实现延迟消息请参考这里</a></em></p><hr><h1 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h1><p><strong>设计主要包含以下几点：</strong></p><ul><li>将整个Redis当做消息池，以kv形式存储消息</li><li>使用ZSET做优先队列，按照score维持优先级</li><li>使用LIST结构，以先进先出的方式消费</li><li>zset和list存储消息地址（对应消息池的每个key）</li><li>自定义路由对象，存储zset和list名称，以点对点的方式将消息从zset路由到正确的list</li><li>使用定时器维持路由</li><li>根据TTL规则实现消息延迟</li></ul><p> <img src="http://img.blog.csdn.net/20180209131159151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2l6YXJkX3Jw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="基于Redis有消息队列设计方案"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="技术说明"><a href="#技术说明" class="headerlink" title="技术说明"></a>技术说明</h2><blockquote><p>示例使用Springboot，gradle，redis，jdk8。</p></blockquote><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><blockquote><p>核心代码主要包含消息对象Message，路由器Route和消息队列RedisMQ。</p></blockquote><h3 id="Message对象"><a href="#Message对象" class="headerlink" title="Message对象"></a>Message对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.msmq;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> Message</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;封装消息元数据&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/2 15:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息主题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息延迟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> delay;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息优先级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priority;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息存活时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ttl;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息体，对应业务内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String body;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间，如果只有优先级没有延迟，可以设置创建时间为0</span></span><br><span class="line"><span class="comment">     * 用来消除时间的影响</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> createTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息状态（延迟-0；待发送-1；已发送-2；发送失败-3）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getset略...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Route-消息路由器"><a href="#Route-消息路由器" class="headerlink" title="Route(消息路由器)"></a>Route(消息路由器)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.msmq;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> Route</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;消息路由器，主要控制将消息从指定的队列路由到待消费的list&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 通过这种方式实现自定义延迟以及优先级发送&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/3 14:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Route</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放消息的队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String queue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 待消费的列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Route</span><span class="params">(String queue, String list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getset略...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RedisMq-消息队列"><a href="#RedisMq-消息队列" class="headerlink" title="RedisMq(消息队列)"></a>RedisMq(消息队列)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.msmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> git.yampery.utils.JedisUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> RedisMQ</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;基于redis的消息队列&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;将整个redis作为消息池存储消息体，以ZSET为消息队列，LIST作为待消费列表&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 用Spring定时器作为监听器，每次监听ZSET中指定数量的消息&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 根据SCORE确定是否达到发送要求，如果达到，利用消息路由&#123;<span class="doctag">@link</span> Route&#125;将消息路由到待消费list&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/2 15:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisMQ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息池前缀，以此前缀加上传递的消息id作为key，以消息&#123;<span class="doctag">@link</span> Message&#125;</span></span><br><span class="line"><span class="comment">     * 的消息体body作为值存储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_POOL = <span class="string">"Message:Pool:"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认监听数量，对应监听zset队列前多少个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAUT_MONITOR = <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Resource</span> <span class="keyword">private</span> JedisUtils jedisUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次监听queue中元素的数量，可配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> monitorCount = DEFAUT_MONITOR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息路由</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Route&gt; routes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入消息池</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addMsgPool</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != message) &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisUtils.setex(MSG_POOL + message.getId(), message.getBody(), message.getTtl());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从消息池中删除消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deMsgPool</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jedisUtils.del(MSG_POOL + id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 像队列中添加消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 优先级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回消息id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">enMessage</span><span class="params">(String key, <span class="keyword">long</span> score, String val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.zadd(key, score, val)) &#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列删除消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deMessage</span><span class="params">(String key, String id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jedisUtils.zdel(key, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">consume</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> count = jedisUtils.countList(key);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &lt; count) &#123;</span><br><span class="line">            <span class="comment">// 可根据需求做限制</span></span><br><span class="line">            List&lt;String&gt; ids = jedisUtils.rangeList(key, <span class="number">0</span>, count - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (ids != <span class="keyword">null</span>) &#123;</span><br><span class="line">                List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                ids.forEach(l -&gt; result.add(jedisUtils.get(MSG_POOL + l, <span class="string">""</span>)));</span><br><span class="line">                jedisUtils.removeListValue(key, ids);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="comment">/// if end~</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息队列监听器&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 监听所有路由器，将消息队列中的消息路由到待消费列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"*/5 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取消息路由</span></span><br><span class="line">        <span class="keyword">int</span> route_size;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == routes || <span class="number">1</span> &gt; (route_size = routes.size())) <span class="keyword">return</span>;</span><br><span class="line">        String queue, list;</span><br><span class="line">        Set&lt;String&gt; set;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; route_size; i++) &#123;</span><br><span class="line">            queue = routes.get(i).getQueue();</span><br><span class="line">            list = routes.get(i).getList();</span><br><span class="line">            set = jedisUtils.getSoredSetByRange(queue, <span class="number">0</span>, monitorCount, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != set) &#123;</span><br><span class="line">                <span class="keyword">long</span> current = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">long</span> score;</span><br><span class="line">                <span class="keyword">for</span> (String id : set) &#123;</span><br><span class="line">                     score = jedisUtils.getScore(queue, id).longValue();</span><br><span class="line">                    <span class="keyword">if</span> (current &gt;= score) &#123;</span><br><span class="line">                        <span class="comment">// 添加到list</span></span><br><span class="line">                        <span class="keyword">if</span> (jedisUtils.insertList(list, id)) &#123;</span><br><span class="line">                            <span class="comment">// 删除queue中的元素</span></span><br><span class="line">                            deMessage(queue, id);</span><br><span class="line">                        &#125; <span class="comment">/// if end~</span></span><br><span class="line">                    &#125; <span class="comment">/// if end~</span></span><br><span class="line">                &#125; <span class="comment">/// for end~</span></span><br><span class="line">            &#125; <span class="comment">/// if end~</span></span><br><span class="line">        &#125; <span class="comment">/// for end~</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonitorCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> monitorCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonitorCount</span><span class="params">(<span class="keyword">int</span> monitorCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.monitorCount = monitorCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Route&gt; <span class="title">getRoutes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> routes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoutes</span><span class="params">(List&lt;Route&gt; routes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.routes = routes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RedisMq消息队列配置："><a href="#RedisMq消息队列配置：" class="headerlink" title="RedisMq消息队列配置："></a>RedisMq消息队列配置：</h3><ul><li>mq.properties文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 队列的监听数量</span><br><span class="line">mq.monitor.count                 =30</span><br><span class="line"># 队列一</span><br><span class="line">mq.queue.first                  =queue:1</span><br><span class="line"># 队列二</span><br><span class="line">mq.queue.second                 =queue:2</span><br><span class="line"># 消费列表一</span><br><span class="line">mq.consumer.first               =list:1</span><br><span class="line"># 消费列表二</span><br><span class="line">mq.consumer.second              =list:2</span><br></pre></td></tr></table></figure><ul><li>MqConfig.java文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> git.yampery.msmq.RedisMQ;</span><br><span class="line"><span class="keyword">import</span> git.yampery.msmq.Route;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> MqConfig</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;消息队列配置&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/9 14:26</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 根据不同的架构可选择使用XML配置</span></span><br><span class="line"><span class="comment"> * ---------------------------------------------------</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">    &lt;bean id="redisMQ" class="git.yampery.msmq.RedisMQ"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="monitorCount" value="15"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="routes"&gt;</span></span><br><span class="line"><span class="comment">            &lt;list&gt;</span></span><br><span class="line"><span class="comment">                &lt;bean class="git.yampery.msmq.Route"&gt;</span></span><br><span class="line"><span class="comment">                    &lt;property name="queue" value="$&#123;mq.queue.first&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                    &lt;property name="list" value="$&#123;mq.consumer.first&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">                &lt;bean class="git.yampery.msmq.Route"&gt;</span></span><br><span class="line"><span class="comment">                    &lt;property name="queue" value="$&#123;mq.queue.second&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                    &lt;property name="list" value="$&#123;mq.consumer.second&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">            &lt;/list&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * ----------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"redisMQ"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisMQ <span class="title">getRedisMq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisMQ redisMQ = <span class="keyword">new</span> RedisMQ();</span><br><span class="line">        <span class="comment">// 配置监听队列元素数量</span></span><br><span class="line">        redisMQ.setMonitorCount(monitorCount);</span><br><span class="line">        <span class="comment">// 配置路由表</span></span><br><span class="line">        redisMQ.setRoutes(routeList());</span><br><span class="line">        <span class="keyword">return</span> redisMQ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回路由表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Route&gt; <span class="title">routeList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Route&gt; routeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Route routeFirst = <span class="keyword">new</span> Route(queueFirst, listFirst);</span><br><span class="line">        Route routeSecond = <span class="keyword">new</span> Route(queueSecond, listSecond);</span><br><span class="line">        routeList.add(routeFirst);</span><br><span class="line">        routeList.add(routeSecond);</span><br><span class="line">        <span class="keyword">return</span> routeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.monitor.count&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> monitorCount;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.queue.first&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String queueFirst;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.queue.second&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String queueSecond;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.consumer.first&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String listFirst;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.consumer.second&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String listSecond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果使用的是xml配置</strong>　请参考：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisMQ"</span> <span class="attr">class</span>=<span class="string">"git.yampery.msmq.RedisMQ"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"monitorCount"</span> <span class="attr">value</span>=<span class="string">"15"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"routes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"git.yampery.msmq.Route"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queue"</span> <span class="attr">value</span>=<span class="string">"$&#123;mq.queue.first&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">value</span>=<span class="string">"$&#123;mq.consumer.first&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"git.yampery.msmq.Route"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queue"</span> <span class="attr">value</span>=<span class="string">"$&#123;mq.queue.second&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">value</span>=<span class="string">"$&#123;mq.consumer.second&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><blockquote><p>并没有内置消费者监听器来实现，可以直接使用定时器实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> git.yampery.msmq.RedisMQ;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> MsgTask</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;发送消息&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/9 18:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span> <span class="keyword">private</span> RedisMQ redisMQ;</span><br><span class="line">    <span class="comment">// @Value("$&#123;mq.list.first&#125;") private String MQ_LIST_FIRST;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"*/5 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        List&lt;String&gt; msgs = redisMQ.consume(redisMQ.getRoutes().get(<span class="number">0</span>).getList());</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != msgs &amp;&amp; <span class="number">0</span> &lt; (len = msgs.size())) &#123;</span><br><span class="line">            <span class="comment">// 将每一条消息转为JSONObject</span></span><br><span class="line">            JSONObject jObj;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(msgs.get(i))) &#123;</span><br><span class="line">                    jObj = JSONObject.parseObject(msgs.get(i));</span><br><span class="line">                    <span class="comment">// 取出消息</span></span><br><span class="line">                    System.out.println(jObj.toJSONString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p>测试设置20秒延迟，发布消息到queue:1，在list:1消费。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> git.yampery.msmq.Message;</span><br><span class="line"><span class="keyword">import</span> git.yampery.msmq.RedisMQ;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> TestMQ</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/9 18:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMQ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisMQ redisMQ;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.queue.first&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String MQ_QUEUE_FIRST;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMq</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        JSONObject jObj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jObj.put(<span class="string">"msg"</span>, <span class="string">"这是一条短信"</span>);</span><br><span class="line"></span><br><span class="line">        String seqId = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将有效信息放入消息队列和消息池中</span></span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.setBody(jObj.toJSONString());</span><br><span class="line">        <span class="comment">// 可以添加延迟配置</span></span><br><span class="line">        message.setDelay(<span class="number">20</span>);</span><br><span class="line">        message.setTopic(<span class="string">"SMS"</span>);</span><br><span class="line">        message.setCreateTime(System.currentTimeMillis());</span><br><span class="line">        message.setId(seqId);</span><br><span class="line">        <span class="comment">// 设置消息池ttl，防止长期占用</span></span><br><span class="line">        message.setTtl(<span class="number">20</span> * <span class="number">60</span>);</span><br><span class="line">        message.setStatus(<span class="number">0</span>);</span><br><span class="line">        message.setPriority(<span class="number">0</span>);</span><br><span class="line">        redisMQ.addMsgPool(message);</span><br><span class="line">        redisMQ.enMessage(MQ_QUEUE_FIRST,</span><br><span class="line">                message.getCreateTime() + message.getDelay() + message.getPriority(), message.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>文章利用redis已有的数据存储结构，实现了轻量级的消息队列，并未真正实现消息持久化。示例是针对点对点的消息路由方式，当然，也可以扩展成广播和主题的方式，不过，这样就得不偿失了，如果需求比较复杂，可靠性要求较高，反而不如直接维护rabbitmq之类的消息队列。<br><em><a href="http://blog.csdn.net/wizard_rp/article/details/79310206" target="_blank" rel="noopener">需要使用rabbitmq实现延迟消息请参考这里</a></em></p><h1 id="源码连接"><a href="#源码连接" class="headerlink" title="源码连接"></a>源码连接</h1><blockquote><p>文章并未贴出所有代码，gradle构建、jedisUtils以及一些配置等可以参考源码，源码只需要设置自己的redis配置即可。<br><a href="https://github.com/Yampery/rdsmq.git" target="_blank" rel="noopener">https://github.com/Yampery/rdsmq.git</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文以redis为数据结构基础，配合Spring管理机制，使用java实现了一个轻量级、可配置的消息队列。适合的项目特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Spring框架管理对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有消息需求，但不想维护mq中间
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>性能测试</title>
    <link href="http://yoursite.com/2018/04/28/ykt_test_binding/"/>
    <id>http://yoursite.com/2018/04/28/ykt_test_binding/</id>
    <published>2018-04-28T09:30:22.702Z</published>
    <updated>2018-04-28T09:57:05.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><hr><h2 id="测试目标"><a href="#测试目标" class="headerlink" title="测试目标"></a>测试目标</h2><pre><code>1. 绑定接口性能：响应时长，并发量2. 历史表500w数据下事务的处理情况3. 压测过程线程状态4. 压测过程堆状态</code></pre><h2 id="当前状态"><a href="#当前状态" class="headerlink" title="当前状态"></a>当前状态</h2><pre><code>1. 号池总量：10000002. T_REGINFO总量：200063. T_REGINFOHIS总量：4884369</code></pre><h2 id="测试服务器"><a href="#测试服务器" class="headerlink" title="测试服务器"></a>测试服务器</h2><h3 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h3><pre><code>Linux testserver-centos 3.10.0-693.21.1.el7.x86_64 #1 SMP Wed Mar 7 19:03:37 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</code></pre><h3 id="CPU信息"><a href="#CPU信息" class="headerlink" title="CPU信息"></a>CPU信息</h3><pre><code>Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz    X32</code></pre><h3 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h3><pre><code>MemTotal:       16215504 kBMemFree:         5705052 kBMemAvailable:   10554240 kBBuffers:              28 kBCached:          5565036 kBSwapCached:       518972 kBActive:          5504676 kBInactive:        4168584 kBActive(anon):    2818640 kBInactive(anon):  2020616 kBActive(file):    2686036 kBInactive(file):  2147968 kBUnevictable:           0 kBMlocked:               0 kBSwapTotal:       8126460 kBSwapFree:        6607556 kBDirty:                84 kBWriteback:             0 kBAnonPages:       3626044 kBMapped:           218624 kBShmem:            731060 kBSlab:             564724 kBSReclaimable:     410288 kBSUnreclaim:       154436 kBKernelStack:       12608 kBPageTables:        77320 kBNFS_Unstable:          0 kBBounce:                0 kBWritebackTmp:          0 kBCommitLimit:    16234212 kBCommitted_AS:    7857184 kBVmallocTotal:   34359738367 kBVmallocUsed:      316296 kBVmallocChunk:   34350563324 kBHardwareCorrupted:     0 kBAnonHugePages:    110592 kBHugePages_Total:       0HugePages_Free:        0HugePages_Rsvd:        0HugePages_Surp:        0Hugepagesize:       2048 kBDirectMap4k:      363456 kBDirectMap2M:    14270464 kBDirectMap1G:     2097152 kB</code></pre><h2 id="数据服务器"><a href="#数据服务器" class="headerlink" title="数据服务器"></a>数据服务器</h2><h3 id="系统版本-1"><a href="#系统版本-1" class="headerlink" title="系统版本"></a>系统版本</h3><pre><code>Linux weihua2 2.6.32-573.18.1.el6.i686 #1 SMP Tue Feb 9 19:51:22 UTC 2016 i686 i686 i386 GNU/Linux</code></pre><h3 id="CPU信息-1"><a href="#CPU信息-1" class="headerlink" title="CPU信息"></a>CPU信息</h3><pre><code>Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz     X32</code></pre><h3 id="内存信息-1"><a href="#内存信息-1" class="headerlink" title="内存信息"></a>内存信息</h3><pre><code>MemTotal:        8130136 kBMemFree:         2471888 kBBuffers:          347776 kBCached:           604844 kBSwapCached:        28720 kBActive:          4093188 kBInactive:        1380972 kBActive(anon):    3596772 kBInactive(anon):   926380 kBActive(file):     496416 kBInactive(file):   454592 kBUnevictable:           0 kBMlocked:               0 kBHighTotal:       7435208 kBHighFree:        2288728 kBLowTotal:         694928 kBLowFree:          183160 kBSwapTotal:       8273916 kBSwapFree:        8214956 kBDirty:                28 kBWriteback:             0 kBAnonPages:       4493096 kBMapped:            33680 kBShmem:              1540 kBSlab:             102100 kBSReclaimable:      78500 kBSUnreclaim:        23600 kBKernelStack:        7672 kBPageTables:        14536 kBNFS_Unstable:          0 kBBounce:                0 kBWritebackTmp:          0 kBCommitLimit:    12338984 kBCommitted_AS:    5936384 kBVmallocTotal:     122880 kBVmallocUsed:        7400 kBVmallocChunk:      35868 kBHugePages_Total:       0HugePages_Free:        0HugePages_Rsvd:        0HugePages_Surp:        0Hugepagesize:       2048 kBDirectMap4k:       10232 kBDirectMap2M:      897024 kB</code></pre><h2 id="负载机"><a href="#负载机" class="headerlink" title="负载机"></a>负载机</h2><h3 id="系统版本-2"><a href="#系统版本-2" class="headerlink" title="系统版本"></a>系统版本</h3><pre><code>Linux weihua1 2.6.32-279.el6.i686 #1 SMP Fri Jun 22 10:59:55 UTC 2012 i686 i686 i386 GNU/Linux</code></pre><h3 id="cpu信息"><a href="#cpu信息" class="headerlink" title="cpu信息"></a>cpu信息</h3><pre><code>Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz  X32</code></pre><h3 id="内存信息-2"><a href="#内存信息-2" class="headerlink" title="内存信息"></a>内存信息</h3><pre><code>MemTotal:        8130520 kBMemFree:         5369356 kBBuffers:          256976 kBCached:          2222852 kBSwapCached:         7724 kBActive:          1667240 kBInactive:         853124 kBActive(anon):      15696 kBInactive(anon):    26080 kBActive(file):    1651544 kBInactive(file):   827044 kBUnevictable:           0 kBMlocked:               0 kBHighTotal:       7435208 kBHighFree:        5249168 kBLowTotal:         695312 kBLowFree:          120188 kBSwapTotal:       8273912 kBSwapFree:        8201640 kBDirty:              4080 kBWriteback:             0 kBAnonPages:         33944 kBMapped:            14192 kBShmem:              1240 kBSlab:             150052 kBSReclaimable:     130256 kBSUnreclaim:        19796 kBKernelStack:        6600 kBPageTables:         5184 kBNFS_Unstable:          0 kBBounce:                0 kBWritebackTmp:          0 kBCommitLimit:    12339172 kBCommitted_AS:     588200 kBVmallocTotal:     122880 kBVmallocUsed:        7064 kBVmallocChunk:      84064 kBHugePages_Total:       0HugePages_Free:        0HugePages_Rsvd:        0HugePages_Surp:        0Hugepagesize:       2048 kBDirectMap4k:       10232 kBDirectMap2M:      897024 kB</code></pre><h2 id="测试准备"><a href="#测试准备" class="headerlink" title="测试准备"></a>测试准备</h2><pre><code>1. 测试工具：jmeter 4.0；2. 测试数据：csv 100w；3. 线程组：500并发，60秒增长时间，600秒持续时间。</code></pre><h2 id="测试结果一"><a href="#测试结果一" class="headerlink" title="测试结果一"></a>测试结果一</h2><pre><code>未开启TIME_WAIT重用，FIN_WAIT_2状态时间为60</code></pre><h3 id="聚合分析"><a href="#聚合分析" class="headerlink" title="聚合分析"></a>聚合分析</h3><p><img src="https://i.imgur.com/dS29AV5.png" alt=""><br><img src="https://i.imgur.com/eJTZ9u2.png" alt=""></p><h3 id="响应时长"><a href="#响应时长" class="headerlink" title="响应时长"></a>响应时长</h3><p><img src="https://i.imgur.com/2k9DUsY.png" alt=""></p><h2 id="测试结果二"><a href="#测试结果二" class="headerlink" title="测试结果二"></a>测试结果二</h2><pre><code>开启TIME_WAIT重用，FIN_WAIT_2状态时间为30</code></pre><h3 id="聚合分析-1"><a href="#聚合分析-1" class="headerlink" title="聚合分析"></a>聚合分析</h3><p><img src="https://i.imgur.com/29x2Idw.png" alt=""><br><img src="https://i.imgur.com/4vLS2uA.png" alt=""></p><h3 id="响应时长-1"><a href="#响应时长-1" class="headerlink" title="响应时长"></a>响应时长</h3><p><img src="https://i.imgur.com/ZMkoGuB.png" alt=""></p><h1 id="数据库访问情况"><a href="#数据库访问情况" class="headerlink" title="数据库访问情况"></a>数据库访问情况</h1><hr><h3 id="T-REGINFOHIS表"><a href="#T-REGINFOHIS表" class="headerlink" title="T_REGINFOHIS表"></a>T_REGINFOHIS表</h3><ul><li>数据量：4884369</li><li><p>表结构</p><pre><code>CREATE TABLE `T_REGINFOHIS` (  `hisid` bigint(16) NOT NULL AUTO_INCREMENT,  `addtime` datetime DEFAULT NULL,  `opuidtype` char(1) DEFAULT NULL,  `uidnumber` varchar(16) DEFAULT NULL,  `regphone` varchar(32) DEFAULT NULL,  `subid` bigint(16) DEFAULT NULL,  `regtime` datetime NOT NULL DEFAULT &apos;0000-00-00 00:00:00&apos;,  `regmodule` varchar(16) DEFAULT NULL,  `uidtype` varchar(8) DEFAULT NULL,  `callrestrict` varchar(8) DEFAULT NULL,  `callrecording` varchar(4) DEFAULT NULL,  `anucode` varchar(64) DEFAULT NULL,  `bnucode` varchar(64) DEFAULT NULL COMMENT &apos;被叫放音&apos;,  `calldisplay` varchar(16) DEFAULT NULL,  `productid` int(11) DEFAULT NULL,  `name` varchar(32) DEFAULT NULL,  `cardtype` varchar(32) DEFAULT NULL,  `cardno` varchar(32) DEFAULT NULL,  `calldisplaynouid` varchar(32) DEFAULT NULL,  `unitid` varchar(64) DEFAULT NULL,  `expiretime` datetime DEFAULT NULL,  `logid` bigint(10) DEFAULT NULL,  `uuidinpartner` varchar(64) DEFAULT NULL,  `batchworkid` varchar(36) DEFAULT NULL,  `opuser` varchar(64) DEFAULT NULL,  PRIMARY KEY (`hisid`,`regtime`),  KEY `ind_uidnumber` (`uidnumber`),  KEY `ind_regphone` (`regphone`),  KEY `ind_uuidinpartner` (`uuidinpartner`)) ENGINE=InnoDB AUTO_INCREMENT=5884370 DEFAULT CHARSET=utf8</code></pre></li></ul><h3 id="T-REGINFO表"><a href="#T-REGINFO表" class="headerlink" title="T_REGINFO表"></a>T_REGINFO表</h3><ul><li>数据量：20006</li><li><p>表结构</p><pre><code>CREATE TABLE `T_REGINFO` (  `uidnumber` varchar(16) DEFAULT NULL,  `regphone` varchar(32) DEFAULT NULL,  `subid` bigint(16) NOT NULL AUTO_INCREMENT,  `regtime` datetime DEFAULT NULL,  `regmodule` varchar(16) DEFAULT NULL,  `uidtype` varchar(8) DEFAULT NULL,  `callrestrict` varchar(8) DEFAULT NULL,  `callrecording` varchar(4) DEFAULT NULL,  `anucode` varchar(64) DEFAULT NULL,  `bnucode` varchar(64) DEFAULT NULL COMMENT &apos;被叫放音&apos;,  `calldisplay` varchar(16) DEFAULT NULL,  `productid` int(11) DEFAULT NULL,  `name` varchar(32) DEFAULT NULL,  `cardtype` varchar(32) DEFAULT NULL,  `cardno` varchar(32) DEFAULT NULL,  `calldisplaynouid` varchar(16) DEFAULT NULL,  `unitid` varchar(16) DEFAULT NULL,  `expiretime` datetime DEFAULT NULL,  `uuidinpartner` varchar(64) DEFAULT NULL,  `batchworkid` varchar(36) DEFAULT &apos;&apos;,  `opuser` varchar(64) DEFAULT NULL,  PRIMARY KEY (`subid`),  KEY `ind_reginfo_batchworkid` (`batchworkid`) USING BTREE,  KEY `ind_reginfo_uuidinpartner` (`uuidinpartner`) USING BTREE,  KEY `ind_reginfo_uidnumber` (`uidnumber`),  KEY `ind_reginfo_regphone` (`regphone`)) ENGINE=InnoDB AUTO_INCREMENT=3452188 DEFAULT CHARSET=utf8;</code></pre></li></ul><hr><h3 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h3><ul><li><p>写入T_REGINFOHIS</p><pre><code>INSERT INTO T_REGINFOHIS (hisid, addtime, opuidtype, uidnumber, regphone, subid, regtime, regmodule, uidtype, callrestrict, callrecording, anucode, bnucode, calldisplay, productid, name, cardtype, cardno, calldisplaynouid, unitid, expiretime, logid, uuidinpartner, batchworkid, opuser)VALUES (?, now(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</code></pre></li><li><p>写入T_REGINFO</p><pre><code>INSERT INTO T_REGINFO (subid, uidnumber, regphone, regtime, regmodule, uidtype, callrestrict, callrecording, anucode, bnucode, calldisplay, productid, name, cardtype, cardno, calldisplaynouid, unitid, expiretime, uuidinpartner, batchworkid, opuser)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</code></pre></li></ul><hr><h3 id="sql统计结果"><a href="#sql统计结果" class="headerlink" title="sql统计结果"></a>sql统计结果</h3><table style="table-layout:auto"><br>    <tr><br>        <td>用例</td><br>        <td>执行数</td><br>        <td>执行时间</td><br>        <td>最慢</td><br>        <td>时间分布</td><br>        <td>平均时间</td><br>    </tr><br>    <tr><br>        <td>写入T_REGINFOHIS</td><br>        <td>1,000,000</td><br>        <td>33,850,801</td><br>        <td>8,945</td><br>        <td>[310988,441162,157808,86465,3577,0,0,0]</td><br>        <td>33.9</td><br>    </tr><br>    <tr><br>        <td>写入T_REGINFO</td><br>        <td>1,000,000</td><br>        <td>37,210,288</td><br>        <td>8,906</td><br>        <td>[403461,337974,188582,64237,5746,0,0,0]</td><br>        <td>37.2</td><br>    </tr><br></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;性能测试&quot;&gt;&lt;a href=&quot;#性能测试&quot; class=&quot;headerlink&quot; title=&quot;性能测试&quot;&gt;&lt;/a&gt;性能测试&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;测试目标&quot;&gt;&lt;a href=&quot;#测试目标&quot; class=&quot;headerlink&quot; title=&quot;测试目标
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/11/hello-world/"/>
    <id>http://yoursite.com/2018/04/11/hello-world/</id>
    <published>2018-04-11T00:54:16.687Z</published>
    <updated>2018-04-11T00:54:16.687Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
