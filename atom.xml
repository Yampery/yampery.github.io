<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博文整理</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-28T09:56:43.825Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yampery</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Redis的消息队列</title>
    <link href="http://yoursite.com/2018/04/28/redis/rdsmq/"/>
    <id>http://yoursite.com/2018/04/28/redis/rdsmq/</id>
    <published>2018-04-28T09:54:39.922Z</published>
    <updated>2018-04-28T09:56:43.825Z</updated>
    
    <content type="html"><![CDATA[<p>本文以redis为数据结构基础，配合Spring管理机制，使用java实现了一个轻量级、可配置的消息队列。适合的项目特点：</p><ul><li><strong>Spring框架管理对象</strong></li><li><strong>有消息需求，但不想维护mq中间件</strong></li><li><strong>有使用redis</strong></li><li><strong>对消息持久化并没有很苛刻的要求</strong></li></ul><p><em><a href="http://blog.csdn.net/wizard_rp/article/details/79310206" target="_blank" rel="noopener">需要使用rabbitmq实现延迟消息请参考这里</a></em></p><hr><h1 id="1-设计方案"><a href="#1-设计方案" class="headerlink" title="1. 设计方案"></a>1. 设计方案</h1><p><strong>设计主要包含以下几点：</strong></p><ul><li>将整个Redis当做消息池，以kv形式存储消息</li><li>使用ZSET做优先队列，按照score维持优先级</li><li>使用LIST结构，以先进先出的方式消费</li><li>zset和list存储消息地址（对应消息池的每个key）</li><li>自定义路由对象，存储zset和list名称，以点对点的方式将消息从zset路由到正确的list</li><li>使用定时器维持路由</li><li>根据TTL规则实现消息延迟</li></ul><p> <img src="http://img.blog.csdn.net/20180209131159151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2l6YXJkX3Jw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="基于Redis有消息队列设计方案"></p><h1 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h1><h2 id="2-1-技术说明"><a href="#2-1-技术说明" class="headerlink" title="2.1 技术说明"></a>2.1 技术说明</h2><blockquote><p>示例使用Springboot，gradle，redis，jdk8。</p></blockquote><h2 id="2-2-核心代码"><a href="#2-2-核心代码" class="headerlink" title="2.2 核心代码"></a>2.2 核心代码</h2><blockquote><p>核心代码主要包含消息对象Message，路由器Route和消息队列RedisMQ。</p></blockquote><h3 id="2-2-1-Message对象"><a href="#2-2-1-Message对象" class="headerlink" title="2.2.1 Message对象"></a>2.2.1 Message对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.msmq;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> Message</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;封装消息元数据&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/2 15:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息主题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息延迟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> delay;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息优先级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> priority;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息存活时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ttl;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息体，对应业务内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String body;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间，如果只有优先级没有延迟，可以设置创建时间为0</span></span><br><span class="line"><span class="comment">     * 用来消除时间的影响</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> createTime;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息状态（延迟-0；待发送-1；已发送-2；发送失败-3）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getset略...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-Route-消息路由器"><a href="#2-2-2-Route-消息路由器" class="headerlink" title="2.2.2 Route(消息路由器)"></a>2.2.2 Route(消息路由器)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.msmq;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> Route</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;消息路由器，主要控制将消息从指定的队列路由到待消费的list&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 通过这种方式实现自定义延迟以及优先级发送&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/3 14:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Route</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存放消息的队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String queue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 待消费的列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Route</span><span class="params">(String queue, String list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = queue;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getset略...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-RedisMq-消息队列"><a href="#2-2-3-RedisMq-消息队列" class="headerlink" title="2.2.3 RedisMq(消息队列)"></a>2.2.3 RedisMq(消息队列)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.msmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> git.yampery.utils.JedisUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> RedisMQ</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;基于redis的消息队列&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;将整个redis作为消息池存储消息体，以ZSET为消息队列，LIST作为待消费列表&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 用Spring定时器作为监听器，每次监听ZSET中指定数量的消息&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 根据SCORE确定是否达到发送要求，如果达到，利用消息路由&#123;<span class="doctag">@link</span> Route&#125;将消息路由到待消费list&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017/11/2 15:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisMQ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息池前缀，以此前缀加上传递的消息id作为key，以消息&#123;<span class="doctag">@link</span> Message&#125;</span></span><br><span class="line"><span class="comment">     * 的消息体body作为值存储</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MSG_POOL = <span class="string">"Message:Pool:"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认监听数量，对应监听zset队列前多少个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAUT_MONITOR = <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Resource</span> <span class="keyword">private</span> JedisUtils jedisUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次监听queue中元素的数量，可配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> monitorCount = DEFAUT_MONITOR;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息路由</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Route&gt; routes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存入消息池</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addMsgPool</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != message) &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisUtils.setex(MSG_POOL + message.getId(), message.getBody(), message.getTtl());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从消息池中删除消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deMsgPool</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jedisUtils.del(MSG_POOL + id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 像队列中添加消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 优先级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回消息id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">enMessage</span><span class="params">(String key, <span class="keyword">long</span> score, String val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jedisUtils.zadd(key, score, val)) &#123;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列删除消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deMessage</span><span class="params">(String key, String id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jedisUtils.zdel(key, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">consume</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> count = jedisUtils.countList(key);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &lt; count) &#123;</span><br><span class="line">            <span class="comment">// 可根据需求做限制</span></span><br><span class="line">            List&lt;String&gt; ids = jedisUtils.rangeList(key, <span class="number">0</span>, count - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (ids != <span class="keyword">null</span>) &#123;</span><br><span class="line">                List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                ids.forEach(l -&gt; result.add(jedisUtils.get(MSG_POOL + l, <span class="string">""</span>)));</span><br><span class="line">                jedisUtils.removeListValue(key, ids);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="comment">/// if end~</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息队列监听器&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 监听所有路由器，将消息队列中的消息路由到待消费列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"*/5 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取消息路由</span></span><br><span class="line">        <span class="keyword">int</span> route_size;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == routes || <span class="number">1</span> &gt; (route_size = routes.size())) <span class="keyword">return</span>;</span><br><span class="line">        String queue, list;</span><br><span class="line">        Set&lt;String&gt; set;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; route_size; i++) &#123;</span><br><span class="line">            queue = routes.get(i).getQueue();</span><br><span class="line">            list = routes.get(i).getList();</span><br><span class="line">            set = jedisUtils.getSoredSetByRange(queue, <span class="number">0</span>, monitorCount, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != set) &#123;</span><br><span class="line">                <span class="keyword">long</span> current = System.currentTimeMillis();</span><br><span class="line">                <span class="keyword">long</span> score;</span><br><span class="line">                <span class="keyword">for</span> (String id : set) &#123;</span><br><span class="line">                     score = jedisUtils.getScore(queue, id).longValue();</span><br><span class="line">                    <span class="keyword">if</span> (current &gt;= score) &#123;</span><br><span class="line">                        <span class="comment">// 添加到list</span></span><br><span class="line">                        <span class="keyword">if</span> (jedisUtils.insertList(list, id)) &#123;</span><br><span class="line">                            <span class="comment">// 删除queue中的元素</span></span><br><span class="line">                            deMessage(queue, id);</span><br><span class="line">                        &#125; <span class="comment">/// if end~</span></span><br><span class="line">                    &#125; <span class="comment">/// if end~</span></span><br><span class="line">                &#125; <span class="comment">/// for end~</span></span><br><span class="line">            &#125; <span class="comment">/// if end~</span></span><br><span class="line">        &#125; <span class="comment">/// for end~</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonitorCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> monitorCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonitorCount</span><span class="params">(<span class="keyword">int</span> monitorCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.monitorCount = monitorCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Route&gt; <span class="title">getRoutes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> routes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoutes</span><span class="params">(List&lt;Route&gt; routes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.routes = routes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-RedisMq消息队列配置："><a href="#2-2-4-RedisMq消息队列配置：" class="headerlink" title="2.2.4 RedisMq消息队列配置："></a>2.2.4 RedisMq消息队列配置：</h3><ul><li>mq.properties文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 队列的监听数量</span><br><span class="line">mq.monitor.count                 =30</span><br><span class="line"># 队列一</span><br><span class="line">mq.queue.first                  =queue:1</span><br><span class="line"># 队列二</span><br><span class="line">mq.queue.second                 =queue:2</span><br><span class="line"># 消费列表一</span><br><span class="line">mq.consumer.first               =list:1</span><br><span class="line"># 消费列表二</span><br><span class="line">mq.consumer.second              =list:2</span><br></pre></td></tr></table></figure><ul><li>MqConfig.java文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> git.yampery.msmq.RedisMQ;</span><br><span class="line"><span class="keyword">import</span> git.yampery.msmq.Route;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> MqConfig</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;消息队列配置&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/9 14:26</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 根据不同的架构可选择使用XML配置</span></span><br><span class="line"><span class="comment"> * ---------------------------------------------------</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">    &lt;bean id="redisMQ" class="git.yampery.msmq.RedisMQ"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="monitorCount" value="15"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="routes"&gt;</span></span><br><span class="line"><span class="comment">            &lt;list&gt;</span></span><br><span class="line"><span class="comment">                &lt;bean class="git.yampery.msmq.Route"&gt;</span></span><br><span class="line"><span class="comment">                    &lt;property name="queue" value="$&#123;mq.queue.first&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                    &lt;property name="list" value="$&#123;mq.consumer.first&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">                &lt;bean class="git.yampery.msmq.Route"&gt;</span></span><br><span class="line"><span class="comment">                    &lt;property name="queue" value="$&#123;mq.queue.second&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                    &lt;property name="list" value="$&#123;mq.consumer.second&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">            &lt;/list&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * ----------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"redisMQ"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisMQ <span class="title">getRedisMq</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedisMQ redisMQ = <span class="keyword">new</span> RedisMQ();</span><br><span class="line">        <span class="comment">// 配置监听队列元素数量</span></span><br><span class="line">        redisMQ.setMonitorCount(monitorCount);</span><br><span class="line">        <span class="comment">// 配置路由表</span></span><br><span class="line">        redisMQ.setRoutes(routeList());</span><br><span class="line">        <span class="keyword">return</span> redisMQ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回路由表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Route&gt; <span class="title">routeList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Route&gt; routeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Route routeFirst = <span class="keyword">new</span> Route(queueFirst, listFirst);</span><br><span class="line">        Route routeSecond = <span class="keyword">new</span> Route(queueSecond, listSecond);</span><br><span class="line">        routeList.add(routeFirst);</span><br><span class="line">        routeList.add(routeSecond);</span><br><span class="line">        <span class="keyword">return</span> routeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.monitor.count&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> monitorCount;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.queue.first&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String queueFirst;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.queue.second&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String queueSecond;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.consumer.first&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String listFirst;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.consumer.second&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String listSecond;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果使用的是xml配置</strong>　请参考：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisMQ"</span> <span class="attr">class</span>=<span class="string">"git.yampery.msmq.RedisMQ"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"monitorCount"</span> <span class="attr">value</span>=<span class="string">"15"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"routes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"git.yampery.msmq.Route"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queue"</span> <span class="attr">value</span>=<span class="string">"$&#123;mq.queue.first&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">value</span>=<span class="string">"$&#123;mq.consumer.first&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"git.yampery.msmq.Route"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queue"</span> <span class="attr">value</span>=<span class="string">"$&#123;mq.queue.second&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">value</span>=<span class="string">"$&#123;mq.consumer.second&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-5-消费者"><a href="#2-2-5-消费者" class="headerlink" title="2.2.5 消费者"></a>2.2.5 消费者</h3><blockquote><p>并没有内置消费者监听器来实现，可以直接使用定时器实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> git.yampery.msmq.RedisMQ;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> MsgTask</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;发送消息&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/9 18:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span> <span class="keyword">private</span> RedisMQ redisMQ;</span><br><span class="line">    <span class="comment">// @Value("$&#123;mq.list.first&#125;") private String MQ_LIST_FIRST;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron=<span class="string">"*/5 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        List&lt;String&gt; msgs = redisMQ.consume(redisMQ.getRoutes().get(<span class="number">0</span>).getList());</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != msgs &amp;&amp; <span class="number">0</span> &lt; (len = msgs.size())) &#123;</span><br><span class="line">            <span class="comment">// 将每一条消息转为JSONObject</span></span><br><span class="line">            JSONObject jObj;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.isEmpty(msgs.get(i))) &#123;</span><br><span class="line">                    jObj = JSONObject.parseObject(msgs.get(i));</span><br><span class="line">                    <span class="comment">// 取出消息</span></span><br><span class="line">                    System.out.println(jObj.toJSONString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h1><blockquote><p>测试设置20秒延迟，发布消息到queue:1，在list:1消费。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> git.yampery.mq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> git.yampery.msmq.Message;</span><br><span class="line"><span class="keyword">import</span> git.yampery.msmq.RedisMQ;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@decription</span> TestMQ</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yampery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/2/9 18:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMQ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisMQ redisMQ;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mq.queue.first&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String MQ_QUEUE_FIRST;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMq</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        JSONObject jObj = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jObj.put(<span class="string">"msg"</span>, <span class="string">"这是一条短信"</span>);</span><br><span class="line"></span><br><span class="line">        String seqId = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将有效信息放入消息队列和消息池中</span></span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.setBody(jObj.toJSONString());</span><br><span class="line">        <span class="comment">// 可以添加延迟配置</span></span><br><span class="line">        message.setDelay(<span class="number">20</span>);</span><br><span class="line">        message.setTopic(<span class="string">"SMS"</span>);</span><br><span class="line">        message.setCreateTime(System.currentTimeMillis());</span><br><span class="line">        message.setId(seqId);</span><br><span class="line">        <span class="comment">// 设置消息池ttl，防止长期占用</span></span><br><span class="line">        message.setTtl(<span class="number">20</span> * <span class="number">60</span>);</span><br><span class="line">        message.setStatus(<span class="number">0</span>);</span><br><span class="line">        message.setPriority(<span class="number">0</span>);</span><br><span class="line">        redisMQ.addMsgPool(message);</span><br><span class="line">        redisMQ.enMessage(MQ_QUEUE_FIRST,</span><br><span class="line">                message.getCreateTime() + message.getDelay() + message.getPriority(), message.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>文章利用redis已有的数据存储结构，实现了轻量级的消息队列，并未真正实现消息持久化。示例是针对点对点的消息路由方式，当然，也可以扩展成广播和主题的方式，不过，这样就得不偿失了，如果需求比较复杂，可靠性要求较高，反而不如直接维护rabbitmq之类的消息队列。<br><em><a href="http://blog.csdn.net/wizard_rp/article/details/79310206" target="_blank" rel="noopener">需要使用rabbitmq实现延迟消息请参考这里</a></em></p><h1 id="4-源码连接"><a href="#4-源码连接" class="headerlink" title="4. 源码连接"></a>4. 源码连接</h1><blockquote><p>文章并未贴出所有代码，gradle构建、jedisUtils以及一些配置等可以参考源码，源码只需要设置自己的redis配置即可。<br><a href="https://github.com/Yampery/rdsmq.git" target="_blank" rel="noopener">https://github.com/Yampery/rdsmq.git</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文以redis为数据结构基础，配合Spring管理机制，使用java实现了一个轻量级、可配置的消息队列。适合的项目特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Spring框架管理对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有消息需求，但不想维护mq中间
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>性能测试</title>
    <link href="http://yoursite.com/2018/04/28/ykt_test_binding/"/>
    <id>http://yoursite.com/2018/04/28/ykt_test_binding/</id>
    <published>2018-04-28T09:30:22.702Z</published>
    <updated>2018-04-28T09:57:05.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><hr><h2 id="测试目标"><a href="#测试目标" class="headerlink" title="测试目标"></a>测试目标</h2><pre><code>1. 绑定接口性能：响应时长，并发量2. 历史表500w数据下事务的处理情况3. 压测过程线程状态4. 压测过程堆状态</code></pre><h2 id="当前状态"><a href="#当前状态" class="headerlink" title="当前状态"></a>当前状态</h2><pre><code>1. 号池总量：10000002. T_REGINFO总量：200063. T_REGINFOHIS总量：4884369</code></pre><h2 id="测试服务器"><a href="#测试服务器" class="headerlink" title="测试服务器"></a>测试服务器</h2><h3 id="系统版本"><a href="#系统版本" class="headerlink" title="系统版本"></a>系统版本</h3><pre><code>Linux testserver-centos 3.10.0-693.21.1.el7.x86_64 #1 SMP Wed Mar 7 19:03:37 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</code></pre><h3 id="CPU信息"><a href="#CPU信息" class="headerlink" title="CPU信息"></a>CPU信息</h3><pre><code>Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz    X32</code></pre><h3 id="内存信息"><a href="#内存信息" class="headerlink" title="内存信息"></a>内存信息</h3><pre><code>MemTotal:       16215504 kBMemFree:         5705052 kBMemAvailable:   10554240 kBBuffers:              28 kBCached:          5565036 kBSwapCached:       518972 kBActive:          5504676 kBInactive:        4168584 kBActive(anon):    2818640 kBInactive(anon):  2020616 kBActive(file):    2686036 kBInactive(file):  2147968 kBUnevictable:           0 kBMlocked:               0 kBSwapTotal:       8126460 kBSwapFree:        6607556 kBDirty:                84 kBWriteback:             0 kBAnonPages:       3626044 kBMapped:           218624 kBShmem:            731060 kBSlab:             564724 kBSReclaimable:     410288 kBSUnreclaim:       154436 kBKernelStack:       12608 kBPageTables:        77320 kBNFS_Unstable:          0 kBBounce:                0 kBWritebackTmp:          0 kBCommitLimit:    16234212 kBCommitted_AS:    7857184 kBVmallocTotal:   34359738367 kBVmallocUsed:      316296 kBVmallocChunk:   34350563324 kBHardwareCorrupted:     0 kBAnonHugePages:    110592 kBHugePages_Total:       0HugePages_Free:        0HugePages_Rsvd:        0HugePages_Surp:        0Hugepagesize:       2048 kBDirectMap4k:      363456 kBDirectMap2M:    14270464 kBDirectMap1G:     2097152 kB</code></pre><h2 id="数据服务器"><a href="#数据服务器" class="headerlink" title="数据服务器"></a>数据服务器</h2><h3 id="系统版本-1"><a href="#系统版本-1" class="headerlink" title="系统版本"></a>系统版本</h3><pre><code>Linux weihua2 2.6.32-573.18.1.el6.i686 #1 SMP Tue Feb 9 19:51:22 UTC 2016 i686 i686 i386 GNU/Linux</code></pre><h3 id="CPU信息-1"><a href="#CPU信息-1" class="headerlink" title="CPU信息"></a>CPU信息</h3><pre><code>Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz     X32</code></pre><h3 id="内存信息-1"><a href="#内存信息-1" class="headerlink" title="内存信息"></a>内存信息</h3><pre><code>MemTotal:        8130136 kBMemFree:         2471888 kBBuffers:          347776 kBCached:           604844 kBSwapCached:        28720 kBActive:          4093188 kBInactive:        1380972 kBActive(anon):    3596772 kBInactive(anon):   926380 kBActive(file):     496416 kBInactive(file):   454592 kBUnevictable:           0 kBMlocked:               0 kBHighTotal:       7435208 kBHighFree:        2288728 kBLowTotal:         694928 kBLowFree:          183160 kBSwapTotal:       8273916 kBSwapFree:        8214956 kBDirty:                28 kBWriteback:             0 kBAnonPages:       4493096 kBMapped:            33680 kBShmem:              1540 kBSlab:             102100 kBSReclaimable:      78500 kBSUnreclaim:        23600 kBKernelStack:        7672 kBPageTables:        14536 kBNFS_Unstable:          0 kBBounce:                0 kBWritebackTmp:          0 kBCommitLimit:    12338984 kBCommitted_AS:    5936384 kBVmallocTotal:     122880 kBVmallocUsed:        7400 kBVmallocChunk:      35868 kBHugePages_Total:       0HugePages_Free:        0HugePages_Rsvd:        0HugePages_Surp:        0Hugepagesize:       2048 kBDirectMap4k:       10232 kBDirectMap2M:      897024 kB</code></pre><h2 id="负载机"><a href="#负载机" class="headerlink" title="负载机"></a>负载机</h2><h3 id="系统版本-2"><a href="#系统版本-2" class="headerlink" title="系统版本"></a>系统版本</h3><pre><code>Linux weihua1 2.6.32-279.el6.i686 #1 SMP Fri Jun 22 10:59:55 UTC 2012 i686 i686 i386 GNU/Linux</code></pre><h3 id="cpu信息"><a href="#cpu信息" class="headerlink" title="cpu信息"></a>cpu信息</h3><pre><code>Intel(R) Xeon(R) CPU E5-2650 0 @ 2.00GHz  X32</code></pre><h3 id="内存信息-2"><a href="#内存信息-2" class="headerlink" title="内存信息"></a>内存信息</h3><pre><code>MemTotal:        8130520 kBMemFree:         5369356 kBBuffers:          256976 kBCached:          2222852 kBSwapCached:         7724 kBActive:          1667240 kBInactive:         853124 kBActive(anon):      15696 kBInactive(anon):    26080 kBActive(file):    1651544 kBInactive(file):   827044 kBUnevictable:           0 kBMlocked:               0 kBHighTotal:       7435208 kBHighFree:        5249168 kBLowTotal:         695312 kBLowFree:          120188 kBSwapTotal:       8273912 kBSwapFree:        8201640 kBDirty:              4080 kBWriteback:             0 kBAnonPages:         33944 kBMapped:            14192 kBShmem:              1240 kBSlab:             150052 kBSReclaimable:     130256 kBSUnreclaim:        19796 kBKernelStack:        6600 kBPageTables:         5184 kBNFS_Unstable:          0 kBBounce:                0 kBWritebackTmp:          0 kBCommitLimit:    12339172 kBCommitted_AS:     588200 kBVmallocTotal:     122880 kBVmallocUsed:        7064 kBVmallocChunk:      84064 kBHugePages_Total:       0HugePages_Free:        0HugePages_Rsvd:        0HugePages_Surp:        0Hugepagesize:       2048 kBDirectMap4k:       10232 kBDirectMap2M:      897024 kB</code></pre><h2 id="测试准备"><a href="#测试准备" class="headerlink" title="测试准备"></a>测试准备</h2><pre><code>1. 测试工具：jmeter 4.0；2. 测试数据：csv 100w；3. 线程组：500并发，60秒增长时间，600秒持续时间。</code></pre><h2 id="测试结果一"><a href="#测试结果一" class="headerlink" title="测试结果一"></a>测试结果一</h2><pre><code>未开启TIME_WAIT重用，FIN_WAIT_2状态时间为60</code></pre><h3 id="聚合分析"><a href="#聚合分析" class="headerlink" title="聚合分析"></a>聚合分析</h3><p><img src="https://i.imgur.com/dS29AV5.png" alt=""><br><img src="https://i.imgur.com/eJTZ9u2.png" alt=""></p><h3 id="响应时长"><a href="#响应时长" class="headerlink" title="响应时长"></a>响应时长</h3><p><img src="https://i.imgur.com/2k9DUsY.png" alt=""></p><h2 id="测试结果二"><a href="#测试结果二" class="headerlink" title="测试结果二"></a>测试结果二</h2><pre><code>开启TIME_WAIT重用，FIN_WAIT_2状态时间为30</code></pre><h3 id="聚合分析-1"><a href="#聚合分析-1" class="headerlink" title="聚合分析"></a>聚合分析</h3><p><img src="https://i.imgur.com/29x2Idw.png" alt=""><br><img src="https://i.imgur.com/4vLS2uA.png" alt=""></p><h3 id="响应时长-1"><a href="#响应时长-1" class="headerlink" title="响应时长"></a>响应时长</h3><p><img src="https://i.imgur.com/ZMkoGuB.png" alt=""></p><h1 id="数据库访问情况"><a href="#数据库访问情况" class="headerlink" title="数据库访问情况"></a>数据库访问情况</h1><hr><h3 id="T-REGINFOHIS表"><a href="#T-REGINFOHIS表" class="headerlink" title="T_REGINFOHIS表"></a>T_REGINFOHIS表</h3><ul><li>数据量：4884369</li><li><p>表结构</p><pre><code>CREATE TABLE `T_REGINFOHIS` (  `hisid` bigint(16) NOT NULL AUTO_INCREMENT,  `addtime` datetime DEFAULT NULL,  `opuidtype` char(1) DEFAULT NULL,  `uidnumber` varchar(16) DEFAULT NULL,  `regphone` varchar(32) DEFAULT NULL,  `subid` bigint(16) DEFAULT NULL,  `regtime` datetime NOT NULL DEFAULT &apos;0000-00-00 00:00:00&apos;,  `regmodule` varchar(16) DEFAULT NULL,  `uidtype` varchar(8) DEFAULT NULL,  `callrestrict` varchar(8) DEFAULT NULL,  `callrecording` varchar(4) DEFAULT NULL,  `anucode` varchar(64) DEFAULT NULL,  `bnucode` varchar(64) DEFAULT NULL COMMENT &apos;被叫放音&apos;,  `calldisplay` varchar(16) DEFAULT NULL,  `productid` int(11) DEFAULT NULL,  `name` varchar(32) DEFAULT NULL,  `cardtype` varchar(32) DEFAULT NULL,  `cardno` varchar(32) DEFAULT NULL,  `calldisplaynouid` varchar(32) DEFAULT NULL,  `unitid` varchar(64) DEFAULT NULL,  `expiretime` datetime DEFAULT NULL,  `logid` bigint(10) DEFAULT NULL,  `uuidinpartner` varchar(64) DEFAULT NULL,  `batchworkid` varchar(36) DEFAULT NULL,  `opuser` varchar(64) DEFAULT NULL,  PRIMARY KEY (`hisid`,`regtime`),  KEY `ind_uidnumber` (`uidnumber`),  KEY `ind_regphone` (`regphone`),  KEY `ind_uuidinpartner` (`uuidinpartner`)) ENGINE=InnoDB AUTO_INCREMENT=5884370 DEFAULT CHARSET=utf8</code></pre></li></ul><h3 id="T-REGINFO表"><a href="#T-REGINFO表" class="headerlink" title="T_REGINFO表"></a>T_REGINFO表</h3><ul><li>数据量：20006</li><li><p>表结构</p><pre><code>CREATE TABLE `T_REGINFO` (  `uidnumber` varchar(16) DEFAULT NULL,  `regphone` varchar(32) DEFAULT NULL,  `subid` bigint(16) NOT NULL AUTO_INCREMENT,  `regtime` datetime DEFAULT NULL,  `regmodule` varchar(16) DEFAULT NULL,  `uidtype` varchar(8) DEFAULT NULL,  `callrestrict` varchar(8) DEFAULT NULL,  `callrecording` varchar(4) DEFAULT NULL,  `anucode` varchar(64) DEFAULT NULL,  `bnucode` varchar(64) DEFAULT NULL COMMENT &apos;被叫放音&apos;,  `calldisplay` varchar(16) DEFAULT NULL,  `productid` int(11) DEFAULT NULL,  `name` varchar(32) DEFAULT NULL,  `cardtype` varchar(32) DEFAULT NULL,  `cardno` varchar(32) DEFAULT NULL,  `calldisplaynouid` varchar(16) DEFAULT NULL,  `unitid` varchar(16) DEFAULT NULL,  `expiretime` datetime DEFAULT NULL,  `uuidinpartner` varchar(64) DEFAULT NULL,  `batchworkid` varchar(36) DEFAULT &apos;&apos;,  `opuser` varchar(64) DEFAULT NULL,  PRIMARY KEY (`subid`),  KEY `ind_reginfo_batchworkid` (`batchworkid`) USING BTREE,  KEY `ind_reginfo_uuidinpartner` (`uuidinpartner`) USING BTREE,  KEY `ind_reginfo_uidnumber` (`uidnumber`),  KEY `ind_reginfo_regphone` (`regphone`)) ENGINE=InnoDB AUTO_INCREMENT=3452188 DEFAULT CHARSET=utf8;</code></pre></li></ul><hr><h3 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h3><ul><li><p>写入T_REGINFOHIS</p><pre><code>INSERT INTO T_REGINFOHIS (hisid, addtime, opuidtype, uidnumber, regphone, subid, regtime, regmodule, uidtype, callrestrict, callrecording, anucode, bnucode, calldisplay, productid, name, cardtype, cardno, calldisplaynouid, unitid, expiretime, logid, uuidinpartner, batchworkid, opuser)VALUES (?, now(), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</code></pre></li><li><p>写入T_REGINFO</p><pre><code>INSERT INTO T_REGINFO (subid, uidnumber, regphone, regtime, regmodule, uidtype, callrestrict, callrecording, anucode, bnucode, calldisplay, productid, name, cardtype, cardno, calldisplaynouid, unitid, expiretime, uuidinpartner, batchworkid, opuser)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</code></pre></li></ul><hr><h3 id="sql统计结果"><a href="#sql统计结果" class="headerlink" title="sql统计结果"></a>sql统计结果</h3><table style="table-layout:auto"><br>    <tr><br>        <td>用例</td><br>        <td>执行数</td><br>        <td>执行时间</td><br>        <td>最慢</td><br>        <td>时间分布</td><br>        <td>平均时间</td><br>    </tr><br>    <tr><br>        <td>写入T_REGINFOHIS</td><br>        <td>1,000,000</td><br>        <td>33,850,801</td><br>        <td>8,945</td><br>        <td>[310988,441162,157808,86465,3577,0,0,0]</td><br>        <td>33.9</td><br>    </tr><br>    <tr><br>        <td>写入T_REGINFO</td><br>        <td>1,000,000</td><br>        <td>37,210,288</td><br>        <td>8,906</td><br>        <td>[403461,337974,188582,64237,5746,0,0,0]</td><br>        <td>37.2</td><br>    </tr><br></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;性能测试&quot;&gt;&lt;a href=&quot;#性能测试&quot; class=&quot;headerlink&quot; title=&quot;性能测试&quot;&gt;&lt;/a&gt;性能测试&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;测试目标&quot;&gt;&lt;a href=&quot;#测试目标&quot; class=&quot;headerlink&quot; title=&quot;测试目标
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/11/hello-world/"/>
    <id>http://yoursite.com/2018/04/11/hello-world/</id>
    <published>2018-04-11T00:54:16.687Z</published>
    <updated>2018-04-11T00:54:16.687Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
